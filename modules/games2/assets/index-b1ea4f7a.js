var a0 = Object.defineProperty,
  t0 = Object.defineProperties;
var l0 = Object.getOwnPropertyDescriptors;
var _1 = Object.getOwnPropertySymbols;
var e0 = Object.prototype.hasOwnProperty,
  r0 = Object.prototype.propertyIsEnumerable;
var N1 = (a, t, l) =>
    t in a
      ? a0(a, t, { enumerable: !0, configurable: !0, writable: !0, value: l })
      : (a[t] = l),
  U = (a, t) => {
    for (var l in t || (t = {})) e0.call(t, l) && N1(a, l, t[l]);
    if (_1) for (var l of _1(t)) r0.call(t, l) && N1(a, l, t[l]);
    return a;
  },
  s1 = (a, t) => t0(a, l0(t));
var v = (a, t, l) =>
  new Promise((c, n) => {
    var i = (p) => {
        try {
          f(l.next(p));
        } catch (r) {
          n(r);
        }
      },
      u = (p) => {
        try {
          f(l.throw(p));
        } catch (r) {
          n(r);
        }
      },
      f = (p) => (p.done ? c(p.value) : Promise.resolve(p.value).then(i, u));
    f((l = l.apply(a, t)).next());
  });
import {
  ab as B1,
  aa as I1,
  D as J,
  i as x,
  c as g,
  B as R1,
  t as z,
  f as w,
  l as V,
  H as A,
  A as h,
  F as X,
  a as L,
  w as s,
  a0 as U1,
  e as c0,
  an as n0,
  S as i0,
  m as O1,
  h as s0,
  g as o0,
} from "./manifest-a234c8a0.js";
import {
  s as u0,
  S as d0,
  u as f0,
  P as o1,
  b as $1,
} from "./game-a49e1f5b.js";
import { u as h0 } from "./user-dc7ef1f4.js";
import { B as g0 } from "./BetAmount-add6a26b.js";
import {
  G as m0,
  a as p0,
  b as x0,
  c as b0,
  d as y0,
  e as k0,
} from "./GameBankrollHelp-6ee96441.js";
import { S as z0 } from "./SingleBetButton-c4aa4223.js";
import { S as v0, u as H1 } from "./Sound-0956eba6.js";
import { b as S0 } from "./game-adef0dc7.js";
import { T as w0 } from "./config-6b289bdb.js";
import { a as A0, u as M0 } from "./Layout-b58c3f24.js";
import { n as A1 } from "./amount-af49bfc0.js";
import { u as B0 } from "./deduction-99b6c8dd.js";
import { u as J1 } from "./currency-a0e3a368.js";
import { M as j1, T as I0 } from "./MoreLessBtn-6b8ac376.js";
import { B as C0 } from "./Banner-bbcc8d49.js";
import { t as E } from "./i18n-611811a6.js";
import { S as O0 } from "./SingleLogs-33bda8b8.js";
import { W as D0 } from "./WinAmount-4cf97c3b.js";
import { a as D1 } from "./animate.es-01baad02.js";
import { u as P0 } from "./use-coin-format-bfa33df5.js";
import { u as E0 } from "./multi-stage-game-37de2ac1.js";
import { G as L0 } from "./GameFairnessFile-649b25ea.js";
import "./router-b8d56046.js";
import "./isObject-d5c4896e.js";
import "./isSymbol-0edd6b24.js";
import "./utils-65805dbc.js";
import "./index-4897b9da.js";
import "./number-field-a2716165.js";
import "./QJIB6BDF-1dee7631.js";
import "./FN6EICGO-b0e5a495.js";
import "./LR7LBJN3-fced4fb5.js";
import "./slider-b2a7fa20.js";
import "./NNGMRY2O-be25bda0.js";
import "./index-15f8a785.js";
import "./E53DB7BS-1e802908.js";
import "./resolve-elements.es-b931549e.js";
import "./Symbol-f22f521e.js";
import "./index-eff0ad24.js";
import "./SeedSetting-b2f3d34e.js";
import "./Close-4ee839c4.js";
import "./debounce-9aa0a06b.js";
import "./table-cbcb9a00.js";
import "./throttle-267ea383.js";
import "./LayoutTitle-870a6463.js";
import "./index-f5a6b566.js";
import "./turbo-b4b057de.js";
const W0 = {
    bonus: "/modules/games2/assets/bonus-4bb4d6a9.mp3",
    dark: "/modules/games2/assets/darkDiamond-cb09936b.mp3",
    fill: "/modules/games2/assets/fillArc.803e22bc-b6657e28.mp3",
    outSuccess: "/modules/games2/assets/outSuccess-f979ba95.mp3",
    roll: "/modules/games2/assets/roll-d37cc004.mp3",
    rollBack: "/modules/games2/assets/rollBak-2347d0fb.mp3",
    stone: "/modules/games2/assets/stone-4a9474e5.mp3",
    success: "/modules/games2/assets/success-05df09a3.mp3",
  },
  H = B1.Reader,
  C1 = B1.Writer,
  q1 = B1.util,
  I = B1.roots.gameTwist || (B1.roots.gameTwist = {});
(I.BetValue = (() => {
  function a(t) {
    if (t)
      for (let l = Object.keys(t), c = 0; c < l.length; ++c)
        t[l[c]] != null && (this[l[c]] = t[l[c]]);
  }
  return (
    (a.encode = function (t, l) {
      return l || (l = C1.create()), l;
    }),
    (a.decode = function (t, l) {
      t instanceof H || (t = H.create(t));
      let c = l === void 0 ? t.len : t.pos + l,
        n = new I.BetValue();
      for (; t.pos < c; ) {
        let i = t.uint32();
        t.skipType(7 & i);
      }
      return n;
    }),
    a
  );
})()),
  (I.GameValue = (() => {
    function a(t) {
      if (t)
        for (let l = Object.keys(t), c = 0; c < l.length; ++c)
          t[l[c]] != null && (this[l[c]] = t[l[c]]);
    }
    return (
      (a.prototype.leftIndex = 0),
      (a.prototype.centerIndex = 0),
      (a.prototype.rightIndex = 0),
      (a.prototype.position = 0),
      (a.prototype.index = 0),
      (a.encode = function (t, l) {
        return (
          l || (l = C1.create()),
          t.leftIndex != null &&
            Object.hasOwnProperty.call(t, "leftIndex") &&
            l.uint32(8).sint32(t.leftIndex),
          t.centerIndex != null &&
            Object.hasOwnProperty.call(t, "centerIndex") &&
            l.uint32(16).sint32(t.centerIndex),
          t.rightIndex != null &&
            Object.hasOwnProperty.call(t, "rightIndex") &&
            l.uint32(24).sint32(t.rightIndex),
          t.position != null &&
            Object.hasOwnProperty.call(t, "position") &&
            l.uint32(32).sint32(t.position),
          t.index != null &&
            Object.hasOwnProperty.call(t, "index") &&
            l.uint32(40).sint32(t.index),
          l
        );
      }),
      (a.decode = function (t, l) {
        t instanceof H || (t = H.create(t));
        let c = l === void 0 ? t.len : t.pos + l,
          n = new I.GameValue();
        for (; t.pos < c; ) {
          let i = t.uint32();
          switch (i >>> 3) {
            case 1:
              n.leftIndex = t.sint32();
              break;
            case 2:
              n.centerIndex = t.sint32();
              break;
            case 3:
              n.rightIndex = t.sint32();
              break;
            case 4:
              n.position = t.sint32();
              break;
            case 5:
              n.index = t.sint32();
              break;
            default:
              t.skipType(7 & i);
          }
        }
        return n;
      }),
      a
    );
  })()),
  (I.GameInfo = (() => {
    function a(t) {
      if (t)
        for (let l = Object.keys(t), c = 0; c < l.length; ++c)
          t[l[c]] != null && (this[l[c]] = t[l[c]]);
    }
    return (
      (a.prototype.userId = q1.Long ? q1.Long.fromBits(0, 0, !1) : 0),
      (a.prototype.status = 0),
      (a.prototype.currencyName = ""),
      (a.prototype.betAmount = ""),
      (a.prototype.settleAmount = ""),
      (a.prototype.cashpotPayout = 0),
      (a.prototype.cashpotAmount = ""),
      (a.prototype.leftIndex = 0),
      (a.prototype.centerIndex = 0),
      (a.prototype.rightIndex = 0),
      (a.prototype.distributeId = ""),
      (a.prototype.lastPosition = 0),
      (a.encode = function (t, l) {
        return (
          l || (l = C1.create()),
          t.userId != null &&
            Object.hasOwnProperty.call(t, "userId") &&
            l.uint32(8).sint64(t.userId),
          t.status != null &&
            Object.hasOwnProperty.call(t, "status") &&
            l.uint32(16).sint32(t.status),
          t.currencyName != null &&
            Object.hasOwnProperty.call(t, "currencyName") &&
            l.uint32(26).string(t.currencyName),
          t.betAmount != null &&
            Object.hasOwnProperty.call(t, "betAmount") &&
            l.uint32(34).string(t.betAmount),
          t.settleAmount != null &&
            Object.hasOwnProperty.call(t, "settleAmount") &&
            l.uint32(42).string(t.settleAmount),
          t.cashpotPayout != null &&
            Object.hasOwnProperty.call(t, "cashpotPayout") &&
            l.uint32(49).double(t.cashpotPayout),
          t.cashpotAmount != null &&
            Object.hasOwnProperty.call(t, "cashpotAmount") &&
            l.uint32(58).string(t.cashpotAmount),
          t.leftIndex != null &&
            Object.hasOwnProperty.call(t, "leftIndex") &&
            l.uint32(64).sint32(t.leftIndex),
          t.centerIndex != null &&
            Object.hasOwnProperty.call(t, "centerIndex") &&
            l.uint32(72).sint32(t.centerIndex),
          t.rightIndex != null &&
            Object.hasOwnProperty.call(t, "rightIndex") &&
            l.uint32(80).sint32(t.rightIndex),
          t.distributeId != null &&
            Object.hasOwnProperty.call(t, "distributeId") &&
            l.uint32(90).string(t.distributeId),
          t.lastPosition != null &&
            Object.hasOwnProperty.call(t, "lastPosition") &&
            l.uint32(96).sint32(t.lastPosition),
          l
        );
      }),
      (a.decode = function (t, l) {
        t instanceof H || (t = H.create(t));
        let c = l === void 0 ? t.len : t.pos + l,
          n = new I.GameInfo();
        for (; t.pos < c; ) {
          let i = t.uint32();
          switch (i >>> 3) {
            case 1:
              n.userId = t.sint64();
              break;
            case 2:
              n.status = t.sint32();
              break;
            case 3:
              n.currencyName = t.string();
              break;
            case 4:
              n.betAmount = t.string();
              break;
            case 5:
              n.settleAmount = t.string();
              break;
            case 6:
              n.cashpotPayout = t.double();
              break;
            case 7:
              n.cashpotAmount = t.string();
              break;
            case 8:
              n.leftIndex = t.sint32();
              break;
            case 9:
              n.centerIndex = t.sint32();
              break;
            case 10:
              n.rightIndex = t.sint32();
              break;
            case 11:
              n.distributeId = t.string();
              break;
            case 12:
              n.lastPosition = t.sint32();
              break;
            default:
              t.skipType(7 & i);
          }
        }
        return n;
      }),
      a
    );
  })()),
  (I.CollectRequest = (() => {
    function a(t) {
      if (t)
        for (let l = Object.keys(t), c = 0; c < l.length; ++c)
          t[l[c]] != null && (this[l[c]] = t[l[c]]);
    }
    return (
      (a.prototype.type = 0),
      (a.prototype.frontgroundId = 0),
      (a.encode = function (t, l) {
        return (
          l || (l = C1.create()),
          t.type != null &&
            Object.hasOwnProperty.call(t, "type") &&
            l.uint32(8).int32(t.type),
          t.frontgroundId != null &&
            Object.hasOwnProperty.call(t, "frontgroundId") &&
            l.uint32(120).sint32(t.frontgroundId),
          l
        );
      }),
      (a.decode = function (t, l) {
        t instanceof H || (t = H.create(t));
        let c = l === void 0 ? t.len : t.pos + l,
          n = new I.CollectRequest();
        for (; t.pos < c; ) {
          let i = t.uint32();
          switch (i >>> 3) {
            case 1:
              n.type = t.int32();
              break;
            case 15:
              n.frontgroundId = t.sint32();
              break;
            default:
              t.skipType(7 & i);
          }
        }
        return n;
      }),
      a
    );
  })());
const X1 = [
  [
    {
      id: "arc15",
      path: "M235.5 94.5v31.3c38.1 8.3 67.6 40.2 72.1 79.6.2.1.3.2.4.3l15.5 12 15-11.6c-4.5-56.7-47.6-102.7-103-111.6z",
      circle: {
        cx: "218",
        cy: "218",
        r: "108",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(3, 218, 218)",
        strokeDasharray: "679 679",
        strokeDashoffset: 165,
      },
    },
    {
      id: "arc16",
      path: "M325 221.6c-.4.3-.9.5-1.5.5s-1.1-.2-1.5-.5l-14-10.9c.1 1.7.1 3.5.1 5.2 0 48.1-37.1 87.8-84.2 91.9 0 .1-.1.1-.1.2l-12 15.6 11.7 15.1c64.3-4 115.4-57.5 115.4-122.8 0-1.7 0-3.3-.1-5L325 221.6z",
      circle: {
        cx: "218",
        cy: "218",
        r: "108",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(95, 218, 218)",
        strokeDasharray: "679 679",
        strokeDashoffset: 190,
      },
    },
    {
      id: "arc17",
      path: "M207.9 325.1c-.3-.4-.5-.9-.5-1.5s.2-1.1.5-1.5l10.8-13.9h-2.8c-48.2 0-87.8-37.1-91.9-84.2-.1 0-.1-.1-.2-.1l-15.5-12-15.2 11.7c4 64.3 57.5 115.3 122.8 115.3h2.8l-10.8-13.8z",
      circle: {
        cx: "218",
        cy: "218",
        r: "108",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(183, 218, 218)",
        strokeDasharray: "679 679",
        strokeDashoffset: 182,
      },
    },
    {
      id: "arc18",
      path: "M195.5 125.9V94.6C137.4 104.3 92.9 155 92.9 215.9v2.8l13.9-10.7c.8-.6 2.2-.6 3 0l13.9 10.8V216c-.1-43.9 30.7-80.8 71.8-90.1z",
      circle: {
        cx: "218",
        cy: "218",
        r: "108",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(261, 218, 218)",
        strokeDasharray: "679 679",
        strokeDashoffset: 160,
      },
    },
  ],
  [
    {
      id: "arc1",
      path: "M333.9 80.6l19.5-2.5 2.4-18.5c-32.7-29.1-74.3-48.3-120.3-52.5V38c37.1 4.1 70.9 19.5 97.7 42.8.2-.1.4-.2.7-.2z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(-45, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 136,
      },
    },
    {
      id: "arc2",
      path: "M357.2 79.8c-.1.5-.3 1-.7 1.4-.4.4-.9.6-1.4.7l-18 2.3c33 30.4 54.6 72.9 57.5 120.5.1.1.2.1.3.2l15.5 12 15-11.6c-2.8-56-27.7-106.3-66.1-142.4l-2.1 16.9z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(0, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 162,
      },
    },
    {
      id: "arc3",
      path: "M411.9 220.8c-.4.3-.9.5-1.5.5s-1.1-.2-1.5-.5l-14-10.9c.1 2 .1 4 .1 6 0 45.4-17 86.8-44.9 118.4 0 .1.1.3.1.4l2.8 19.4 18.7 2.1c33.5-37.2 53.9-86.4 53.9-140.3 0-1.9 0-3.8-.1-5.7l-13.6 10.6z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(46, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 164,
      },
    },
    {
      id: "arc4",
      path: "M351.4 358c-.5-.1-1-.3-1.4-.7-.4-.4-.7-.9-.7-1.4l-2.6-17.8c-31 33.1-74.4 54.5-122.7 56.7 0 0 0 .1-.1.1l-12 15.5 11.7 15.1c57-2.1 108.2-26.9 144.8-65.7l-17-1.8z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(92, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 164,
      },
    },
    {
      id: "arc5",
      path: "M207.9 411.9c-.3-.4-.5-.9-.5-1.5s.2-1.1.5-1.5l10.9-14h-2.9c-45.1 0-86.3-16.8-117.9-44.4l-18.8 2.4-2.5 19.5c0 .1 0 .2-.1.3 37.1 32.9 85.8 53 139.2 53h2.7l-10.6-13.8z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(137, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 160,
      },
    },
    {
      id: "arc6",
      path: "M75.5 351.3c.1-.5.3-1 .7-1.4.4-.4.9-.6 1.4-.7l16.6-2.1C61 316.3 39.5 273 37.1 224.8c-.1 0-.1-.1-.2-.1l-15.5-12-15.1 11.7C8.6 281.6 33.8 333 73.1 369.6l2.4-18.3z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(182, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 164,
      },
    },
    {
      id: "arc7",
      path: "M19.9 208.7c.8-.6 2.2-.6 3 0l14 10.9v-3.7c0-45.2 16.9-86.6 44.6-118.1-.1-.2-.1-.4-.2-.6l-2.5-19.5-18.6-2.4C26.6 112.6 6.1 161.9 6.1 215.9v3.4l13.8-10.6z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(226, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 157,
      },
    },
    {
      id: "arc8",
      path: "M80.6 73.9c.5.1 1 .3 1.4.7.4.4.6.9.7 1.4L85 93.9c28.3-30.4 67.1-51 110.6-55.9V7.1c-51.7 5-98 28.9-131.9 64.6l16.9 2.2z",
      circle: {
        cx: "218",
        cy: "218",
        r: "190",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(265, 218, 218)",
        strokeDasharray: "1195 1195",
        strokeDashoffset: 142,
      },
    },
  ],
  [
    {
      id: "arc9",
      path: "M258.9 55.3c-7.8-2.1-15.6-3.6-23.4-4.5v31c5.2.7 10.3 1.8 15.5 3.2 31.1 8.3 57.6 27 75.8 53.1h.6l19.4 2.6 7.2-17.4c-22.4-33.4-55.8-57.4-95.1-68z",
      circle: {
        cx: "218",
        cy: "218",
        r: "150",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(-29, 218, 218)",
        strokeDasharray: "943 943",
        strokeDashoffset: 147,
      },
    },
    {
      id: "arc10",
      path: "M359.9 132.8c-1-1.8-2.1-3.5-3.2-5.3l-6.5 16c-.2.5-.5.9-1 1.2-.3.2-.8.4-1.2.3-.1.1-.2 0-.3-.1l-17.8-2.4c1.2 1.9 2.4 3.7 3.5 5.6 18.1 31.4 22.9 67.8 13.5 102.8-2.1 7.8-4.8 15.3-8.1 22.4.1.1.1.1.1.2l6.1 18.6 19.4-1.3c5-10.1 9.1-20.8 12.1-32 11.4-42.7 5.5-87.6-16.6-126z",
      circle: {
        cx: "218",
        cy: "218",
        r: "150",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(32, 218, 218)",
        strokeDasharray: "943 943",
        strokeDashoffset: 175,
      },
    },
    {
      id: "arc11",
      path: "M343.9 296.2h-.1c-.4 0-.9-.2-1.4-.5-.4-.3-.8-.7-.9-1.2l-5.3-16.2c-11.8 22.8-29.8 41.7-52.4 54.8-18.4 10.6-38.7 16.7-59.4 17.9l-11.9 15.3 12 15.5c26-1.2 51.4-8.7 74.7-22.1 27-15.6 48.6-38 63-64.8l-18.3 1.3z",
      circle: {
        cx: "218",
        cy: "218",
        r: "150",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(92, 218, 218)",
        strokeDasharray: "943 943",
        strokeDashoffset: 171,
      },
    },
    {
      id: "arc12",
      path: "M208.4 368c-.3-.4-.5-.9-.5-1.4 0-.6.2-1 .5-1.5l10.5-13.6c-12.7.3-25.5-1.2-38.1-4.7-31.6-8.5-58.5-27.5-76.7-54.3h-.2l-19.4-3.4-7.9 17.5c22.4 34.4 56.3 59.1 96.2 69.9 14.3 3.8 28.8 5.8 43.3 5.7h3.2L208.4 368z",
      circle: {
        cx: "218",
        cy: "218",
        r: "150",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(152, 218, 218)",
        strokeDasharray: "943 943",
        strokeDashoffset: 171,
      },
    },
    {
      id: "arc13",
      path: "M81.4 286.3c.2-.5.5-.9 1.1-1.1.5-.3 1.1-.4 1.5-.3l17.2 2.9c-.9-1.3-1.7-2.8-2.5-4.2-22.4-38.9-23.4-84.3-6.5-122.5-.1-.2-.2-.3-.3-.5l-7.1-18.3-18.8 2.2C43.4 192.2 43.7 249.9 72 299c.7 1.2 1.4 2.4 2.1 3.5l7.3-16.2z",
      circle: {
        cx: "218",
        cy: "218",
        r: "150",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(210, 218, 218)",
        strokeDasharray: "943 943",
        strokeDashoffset: 165,
      },
    },
    {
      id: "arc14",
      path: "M195.5 50.9c-21.8 2.7-43.1 9.8-62.8 21.1-28.7 16.7-50.6 40.6-64.8 68.3l17.5-2.1c.5-.1 1.1.1 1.5.4.5.3.8.7 1 1.1l6.4 16.5c11.5-23.4 29.7-43.6 53.8-57.5C163 90.1 179 84.6 195.4 82l.1-31.1z",
      circle: {
        cx: "218",
        cy: "218",
        r: "150",
        fill: "none",
        stroke: "white",
        strokeWidth: "44",
        transform: "rotate(264, 218, 218)",
        strokeDasharray: "943 943",
        strokeDashoffset: 155,
      },
    },
  ],
];
var Y1 = ((a) => (
    (a[(a.init = -1)] = "init"),
    (a[(a.normal = 0)] = "normal"),
    (a[(a.disabled = 1)] = "disabled"),
    (a[(a.block = 2)] = "block"),
    a
  ))(Y1 || {}),
  E1 = ((a) => ((a[(a.all = 1)] = "all"), (a[(a.partial = 2)] = "partial"), a))(
    E1 || {}
  );
const P1 = s1(U({}, w0), {
    layerPayouts: [
      [0, 1.6, 5, 10.5, 18],
      [0, 4, 13, 28.5, 53, 88, 137.5, 205, 0],
      [0, 2.5, 8, 16.5, 28.5, 45, 66],
      [100, 200, 300, 400, 500],
    ],
    key: "twist",
  }),
  Q1 = [
    [
      "M288.927 145.568c.096.08.207.118.335.114a.528.528 0 00.326-.113l8.854-6.93c.097-.08.145-.173.143-.277a.358.358 0 00-.144-.275l-1.636-1.367a.695.695 0 00-.179-.116 1.15 1.15 0 00-.208-.053l-5.41-.596a.511.511 0 00-.585.305l-.301 1.6a.353.353 0 00.062.294c.064.082.168.133.314.152l3.07.361-6.317 4.95a.344.344 0 00.002.552l1.674 1.399zm4.35 3.838c.09.085.198.13.326.135a.528.528 0 00.332-.092l1.812-1.241c.102-.075.158-.162.167-.262.01-.1-.03-.192-.12-.278l-1.545-1.469a.538.538 0 00-.326-.147.484.484 0 00-.345.092l-1.812 1.241a.344.344 0 00-.034.552l1.544 1.469zm5.294 5.767c.665.737 1.418 1.28 2.258 1.631.84.35 1.685.512 2.533.483a4.75 4.75 0 002.309-.66c.527-.308.927-.677 1.2-1.106.274-.43.429-.885.466-1.366a3.703 3.703 0 00-.173-1.428 3.892 3.892 0 00-.712-1.294 4.497 4.497 0 00-.182-.189 1.214 1.214 0 00-.207-.166l4.294.112a.294.294 0 00.109-.018.837.837 0 00.122-.054.32.32 0 00.166-.207c.02-.087-.003-.168-.071-.243l-1.507-1.67a.685.685 0 00-.378-.23 2.472 2.472 0 00-.327-.046l-5.537-.152a11.25 11.25 0 00-1.836.074 8.603 8.603 0 00-1.131.211c-.376.097-.72.233-1.033.408-.724.426-1.227.96-1.507 1.6-.28.64-.328 1.333-.142 2.077.185.744.614 1.488 1.286 2.233zm2.137-1.267a1.848 1.848 0 01-.443-.808 1.217 1.217 0 01.084-.828c.125-.265.357-.496.694-.695a2.283 2.283 0 011.052-.311c.348-.01.678.057.99.2.312.144.578.337.797.58.234.26.384.527.45.802.065.274.04.545-.078.81-.117.265-.353.497-.706.694a2.195 2.195 0 01-2.037.13 2.344 2.344 0 01-.803-.574zm3.97 8.12c.126.173.257.276.393.31.136.034.232.05.288.052l4.185.493-1.58 3.092a1.142 1.142 0 00-.075.243c-.027.117.02.257.139.422l1.272 1.751c.1.137.219.2.358.19a.366.366 0 00.309-.193l2.653-5.126 7.35.62c.15.016.264-.035.339-.152.075-.117.07-.235-.017-.354l-1.411-1.943c-.12-.165-.247-.263-.383-.297a4.088 4.088 0 00-.322-.07l-4.214-.389 1.67-3.217c.022-.047.042-.109.062-.184.03-.112-.018-.255-.144-.428l-1.282-1.766a.398.398 0 00-.353-.183.354.354 0 00-.314.187l-2.67 5.16-7.472-.846c-.15-.016-.264.035-.339.152-.075.118-.07.236.017.354l1.54 2.121z",
      "M291.889 311.508c.863-.653 1.499-1.342 1.905-2.066.407-.724.61-1.465.611-2.222a5.05 5.05 0 00-.524-2.222c-.255-.543-.578-.97-.969-1.282a2.975 2.975 0 00-1.286-.608 3.254 3.254 0 00-1.424.038 3.691 3.691 0 00-1.36.656c-.467.354-.804.68-1.01.977a5.29 5.29 0 00-.505.89l-.762-2.16 3.913-2.957a.504.504 0 00.192-.294.497.497 0 00-.042-.35l-.676-1.482c-.056-.113-.136-.18-.237-.202a.358.358 0 00-.3.079l-5.412 4.09a.668.668 0 00-.24.34.735.735 0 00.02.462l2.044 5.791a.342.342 0 00.194.214c.095.042.187.028.277-.04l1.781-1.346a.67.67 0 00.2-.268 5.18 5.18 0 00.16-.407 1.98 1.98 0 01.253-.478c.116-.165.277-.325.484-.482.44-.333.847-.446 1.218-.338.372.108.67.396.895.862.161.344.232.69.212 1.037a2.24 2.24 0 01-.892 1.682 1.954 1.954 0 01-.638.334c-.21.059-.413.057-.61-.007a1.427 1.427 0 01-.569-.375.32.32 0 00-.25-.107.577.577 0 00-.322.136l-1.808 1.367a.404.404 0 00-.154.244.456.456 0 00.031.295c.3.565.733.969 1.299 1.213.565.243 1.22.29 1.96.14.742-.15 1.522-.536 2.34-1.154zm7.43-6.076a.484.484 0 00.164-.313.528.528 0 00-.063-.34l-1.077-1.913c-.065-.108-.147-.172-.245-.19-.099-.018-.195.014-.288.096l-1.6 1.408a.538.538 0 00-.175.313.484.484 0 00.061.351l1.077 1.914a.344.344 0 00.546.083l1.6-1.409zm5.755-5.343c.731-.768 1.225-1.538 1.482-2.311.257-.773.306-1.56.147-2.359-.158-.799-.482-1.602-.971-2.409a17.073 17.073 0 00-.575-.925c-.22-.332-.442-.662-.665-.99a37.348 37.348 0 00-.628-.895c-.553-.742-1.17-1.232-1.85-1.47-.682-.238-1.387-.24-2.118-.007-.73.233-1.43.693-2.098 1.38-.716.735-1.202 1.494-1.459 2.275a4.752 4.752 0 00-.171 2.358c.142.792.458 1.591.947 2.398a28.646 28.646 0 001.246 1.933c.228.324.435.616.622.877.56.734 1.181 1.232 1.863 1.494a3.083 3.083 0 002.1.049c.718-.229 1.428-.695 2.128-1.398zm-1.604-1.869c-.394.404-.776.547-1.149.429-.372-.12-.77-.463-1.192-1.031a66.122 66.122 0 00-.592-.86c-.207-.296-.41-.6-.61-.912-.2-.312-.385-.607-.556-.884-.375-.6-.568-1.146-.579-1.637-.01-.49.185-.95.586-1.377.417-.413.81-.557 1.178-.435.368.123.756.468 1.162 1.037.195.253.396.531.604.835.207.304.41.609.61.913.2.304.385.603.557.896.383.608.576 1.162.578 1.66.003.499-.196.954-.597 1.366zm7.863-5.134c.132-.169.195-.323.19-.463a1.502 1.502 0 00-.03-.292l-.675-4.159 3.407.67c.05.01.134.011.254.004.12-.006.242-.09.367-.25l1.335-1.704c.104-.133.132-.265.084-.396a.366.366 0 00-.27-.244l-5.659-1.142-1.424-7.237c-.026-.15-.106-.244-.24-.284-.133-.04-.245-.002-.335.113l-1.48 1.892c-.126.16-.186.31-.18.45.004.14.012.249.021.328l.784 4.158-3.552-.722a1.294 1.294 0 00-.194-.008c-.116.002-.24.087-.372.256l-1.345 1.718a.398.398 0 00-.08.39.354.354 0 00.266.25l5.695 1.15 1.241 7.416c.027.149.107.244.24.284.133.04.245.002.336-.114l1.616-2.064z",
      "M127.844 285.814a.484.484 0 00.288.206.528.528 0 00.345-.015l10.478-4.077c.116-.05.188-.124.217-.224a.358.358 0 00-.06-.305l-1.17-1.78a.695.695 0 00-.138-.163 1.15 1.15 0 00-.184-.112l-5.007-2.133a.511.511 0 00-.648.123l-.75 1.445a.353.353 0 00-.026.3c.037.097.123.176.257.236l2.835 1.233-7.478 2.914a.344.344 0 00-.158.529l1.2 1.823zm4.761 6.714c.672.82 1.375 1.406 2.11 1.756.736.35 1.51.496 2.323.437.813-.058 1.65-.28 2.51-.667.303-.126.633-.279.99-.456.356-.177.71-.356 1.064-.538.353-.181.675-.352.965-.513.805-.456 1.367-1.008 1.688-1.654.32-.647.41-1.347.268-2.1-.141-.754-.511-1.505-1.11-2.253-.642-.801-1.334-1.377-2.078-1.728a4.752 4.752 0 00-2.32-.462c-.803.044-1.635.259-2.496.645a28.646 28.646 0 00-2.072.998c-.35.186-.665.356-.946.509-.798.465-1.369 1.02-1.713 1.664a3.083 3.083 0 00-.308 2.078c.139.741.514 1.503 1.125 2.284zm2.052-1.361c-.352-.44-.447-.838-.283-1.193.164-.355.554-.707 1.17-1.056.297-.151.606-.312.926-.481.32-.17.646-.334.98-.493.335-.16.65-.307.946-.443.643-.298 1.208-.422 1.696-.372.488.05.92.3 1.295.75.358.466.453.873.286 1.224-.167.35-.558.692-1.173 1.025-.274.163-.575.328-.903.496-.327.169-.655.333-.981.493-.327.16-.646.308-.958.442-.651.305-1.224.428-1.72.37-.494-.06-.921-.313-1.28-.762zm4.269 8.683c.084.091.19.142.318.155a.528.528 0 00.337-.073l1.88-1.135c.106-.068.167-.152.182-.251.016-.1-.02-.194-.104-.285l-1.457-1.556a.538.538 0 00-.317-.166.484.484 0 00-.35.072l-1.88 1.135a.344.344 0 00-.066.549l1.457 1.555zm5.282 5.42c.797.732 1.589 1.234 2.374 1.504.786.27 1.55.337 2.295.202a5.05 5.05 0 002.093-.914c.488-.348.85-.742 1.087-1.183.237-.44.36-.899.367-1.374.008-.475-.09-.94-.292-1.395-.203-.454-.499-.86-.89-1.22-.431-.396-.812-.67-1.141-.819a5.29 5.29 0 00-.966-.336l1.987-1.138 3.612 3.32c.091.084.199.13.323.136a.497.497 0 00.337-.104l1.337-.93c.1-.076.153-.166.156-.27a.358.358 0 00-.131-.282l-4.994-4.59a.668.668 0 00-.379-.176.735.735 0 00-.45.103l-5.33 3.05a.342.342 0 00-.177.229c-.023.1.006.19.09.265l1.643 1.511a.67.67 0 00.3.15c.125.03.268.058.428.083.16.025.333.08.516.164s.37.214.561.39c.407.373.59.753.55 1.137-.039.385-.268.73-.686 1.035-.31.22-.638.352-.983.395a2.24 2.24 0 01-1.814-.577 1.954 1.954 0 01-.443-.567 1.027 1.027 0 01-.103-.6c.027-.205.116-.415.267-.628a.32.32 0 00.06-.266.577.577 0 00-.191-.292l-1.67-1.533a.404.404 0 00-.267-.109.456.456 0 00-.284.084 2.606 2.606 0 00-.96 1.495c-.139.6-.067 1.252.214 1.954.28.703.799 1.401 1.554 2.096zm7.12 5.98c.171.128.327.187.467.178.14-.009.237-.021.29-.037l4.14-.786-.578 3.423c-.008.05-.008.135.002.254.01.12.096.24.26.36l1.74 1.29c.135.1.268.124.397.073a.366.366 0 00.237-.277l.99-5.686 7.197-1.617c.148-.03.241-.113.277-.247.037-.135-.004-.245-.122-.333l-1.93-1.43c-.163-.12-.315-.176-.454-.167-.14.008-.25.019-.328.03l-4.136.895.627-3.57c.006-.052.007-.117.003-.194-.005-.116-.094-.238-.266-.366l-1.753-1.298a.398.398 0 00-.391-.069.354.354 0 00-.244.272l-.997 5.724-7.38 1.438c-.15.03-.242.113-.278.247-.036.135.004.245.122.333l2.107 1.56z",
      [
        "M126.682 181.11a.484.484 0 00.027-.353.528.528 0 00-.19-.287l-2.514-1.923 1.284-2.705a.538.538 0 00.038-.357.484.484 0 00-.196-.298l-1.006-.759a.329.329 0 00-.535.102l-1.292 2.72-2.429-1.865c-.102-.073-.202-.1-.3-.077-.098.022-.174.09-.227.201l-.587 1.238a.538.538 0 00-.039.357.484.484 0 00.196.298l2.429 1.865-1.291 2.72a.484.484 0 00-.027.352.63.63 0 00.199.31l1.007.759c.102.073.202.1.3.077.098-.022.174-.09.227-.201l1.291-2.72 2.514 1.923a.344.344 0 00.534-.14l.587-1.237zm5.04-8.494a.632.632 0 00.094-.456 1.492 1.492 0 00-.096-.333l-4.56-9.432a2.685 2.685 0 00-.187-.347 2.257 2.257 0 00-.286-.348l-1.137-1.032c-.095-.083-.191-.12-.288-.112-.097.008-.18.07-.249.186l-4.043 6.787a.538.538 0 00-.071.35.484.484 0 00.166.317l1.271 1.17a.39.39 0 00.3.11.306.306 0 00.243-.16l2.597-4.36 4.575 9.44a.273.273 0 00.096.136.32.32 0 00.247.098c.089-.006.16-.053.211-.14l1.117-1.874zm4.83-7.775a.484.484 0 00.084-.343.528.528 0 00-.142-.315l-1.504-1.6c-.09-.09-.184-.131-.284-.125-.1.006-.186.06-.256.161l-1.216 1.75a.538.538 0 00-.096.346.484.484 0 00.144.327l1.504 1.6a.344.344 0 00.55-.05l1.216-1.75zm4.719-5.874c.683-.84 1.135-1.66 1.357-2.46.221-.801.242-1.57.062-2.304a5.05 5.05 0 00-1.04-2.033c-.377-.466-.793-.804-1.247-1.013a2.975 2.975 0 00-1.394-.283 3.254 3.254 0 00-1.374.377c-.441.23-.829.55-1.163.962-.37.455-.62.852-.749 1.19a5.29 5.29 0 00-.277.984l-1.256-1.914 3.093-3.807a.504.504 0 00.116-.33.497.497 0 00-.124-.33l-1.01-1.28c-.082-.095-.175-.141-.279-.139a.358.358 0 00-.273.149L131.435 152a.668.668 0 00-.152.389.735.735 0 00.13.443l3.37 5.135c.057.09.136.144.238.162.102.017.19-.018.26-.105l1.408-1.733a.67.67 0 00.13-.308 5.18 5.18 0 00.058-.433 1.98 1.98 0 01.132-.525c.073-.188.191-.382.355-.584.348-.428.716-.635 1.102-.619.386.016.745.224 1.074.623.24.296.39.615.454.957a2.24 2.24 0 01-.464 1.846c-.17.21-.35.368-.54.476-.19.108-.387.154-.593.14a1.427 1.427 0 01-.643-.228.32.32 0 00-.269-.045.577.577 0 00-.279.21l-1.43 1.759a.404.404 0 00-.091.274.456.456 0 00.1.278c.427.477.944.766 1.552.868.607.101 1.253-.01 1.937-.333.684-.323 1.35-.883 1.997-1.68zm5.892-7.188c.152-.151.235-.297.247-.436.012-.14.015-.237.007-.293l-.156-4.21 3.298 1.085c.048.016.132.028.251.037.12.008.252-.06.396-.203l1.535-1.526c.12-.12.164-.247.133-.383a.366.366 0 00-.239-.275l-5.473-1.834-.517-7.357c-.008-.152-.075-.256-.203-.312-.127-.056-.243-.033-.347.07l-1.703 1.694c-.144.144-.222.285-.234.424-.013.14-.019.25-.02.33l.264 4.222-3.436-1.156a1.295 1.295 0 00-.19-.032c-.116-.012-.25.057-.402.208l-1.548 1.539a.398.398 0 00-.126.376c.027.14.105.234.232.282l5.51 1.845.313 7.513c.007.151.075.255.202.311.128.057.243.033.347-.07l1.86-1.85z",
        "M160.79 131.455l-.277.179-.895-1.376a3.246 3.246 0 00-4.486-.951 3.246 3.246 0 00-.951 4.486l.896 1.375-.099.064a1.114 1.114 0 00-.325 1.54l2.661 4.098a1.115 1.115 0 001.542.327l5.81-3.778a1.112 1.112 0 00.326-1.54l-2.662-4.099a1.114 1.114 0 00-1.54-.325zm-4.711 3.062l-.896-1.375a2.051 2.051 0 01.6-2.834 2.05 2.05 0 012.832.602l.896 1.375-3.432 2.232z",
      ],
    ],
    [
      "M290.42 45.85a.484.484 0 00.354-.001.528.528 0 00.272-.213l1.063-1.64 1.406.539a.538.538 0 00.358.01.42.42 0 00.267-.224l.946-1.43a.36.36 0 00.05-.298c-.027-.101-.104-.176-.23-.224l-1.39-.533 3.659-5.627c.065-.107.08-.21.045-.308a.358.358 0 00-.226-.214l-2.496-.956a.89.89 0 00-.734.027l-8.336 3.98a.793.793 0 00-.227.121 1.15 1.15 0 00-.217.234l-.89 1.38a.44.44 0 00-.046.309c.024.093.094.163.21.207l5.102 1.954-1.063 1.64a.344.344 0 00.18.522l1.944.744zm.352-4.938l-2.606-.998 4.778-2.354-2.172 3.352zm5.546 7.302a.484.484 0 00.353.013.528.528 0 00.28-.201l1.269-1.793c.07-.105.092-.206.066-.303-.026-.097-.096-.17-.21-.22l-1.957-.842a.538.538 0 00-.358-.025.484.484 0 00-.291.206l-1.269 1.793a.344.344 0 00.16.53l1.957.842zm6.475 3.182c.96.448 1.848.67 2.663.665a4.554 4.554 0 002.282-.614c.706-.406 1.364-.97 1.972-1.691.217-.246.448-.526.693-.84.244-.315.485-.63.725-.948.239-.316.454-.61.646-.88.527-.761.794-1.503.802-2.224.007-.721-.216-1.39-.67-2.008-.455-.618-1.115-1.134-1.98-1.547-.925-.443-1.799-.662-2.62-.655a4.752 4.752 0 00-2.29.592c-.705.388-1.361.943-1.97 1.665a28.646 28.646 0 00-1.433 1.799c-.233.319-.444.609-.631.87-.516.765-.79 1.512-.82 2.242-.03.729.178 1.397.625 2.005.447.608 1.115 1.13 2.006 1.57zm1.257-2.117c-.509-.244-.767-.56-.773-.951-.007-.391.191-.878.595-1.46.202-.265.41-.544.625-.835.214-.291.437-.581.67-.87.231-.29.451-.56.659-.81.45-.548.905-.905 1.366-1.072.46-.166.958-.128 1.492.115.524.263.787.589.789.977.001.388-.202.866-.611 1.433a17.68 17.68 0 01-.598.839c-.222.294-.445.584-.67.87-.224.286-.448.558-.67.814-.455.557-.918.917-1.39 1.08-.47.161-.966.118-1.484-.13zm6.631 5.841c.188.104.35.142.488.115.137-.028.232-.053.283-.076l3.998-1.331-.117 3.47c-.002.05.01.134.036.251.025.117.127.225.305.323l1.896 1.045c.148.082.283.088.404.02a.366.366 0 00.198-.306l.224-5.768 6.916-2.562c.144-.05.224-.143.242-.281.019-.138-.037-.243-.165-.314l-2.104-1.159c-.177-.098-.335-.133-.472-.106a4.087 4.087 0 00-.321.074l-3.98 1.438.146-3.622a1.294 1.294 0 00-.023-.192c-.02-.115-.125-.224-.312-.327l-1.911-1.053a.398.398 0 00-.397-.016.354.354 0 00-.205.302l-.226 5.805-7.122 2.41c-.143.05-.224.144-.242.282-.018.138.037.242.165.313l2.296 1.265z",
      "M386.258 130.343a.484.484 0 00.273.224c.121.041.236.044.345.007l10.72-3.394c.118-.042.195-.112.23-.21a.358.358 0 00-.04-.308l-1.053-1.853a.695.695 0 00-.127-.17 1.15 1.15 0 00-.177-.124l-4.859-2.45a.511.511 0 00-.655.08l-.841 1.394a.353.353 0 00-.045.298c.03.1.11.183.24.252l2.751 1.413-7.65 2.426a.344.344 0 00-.192.518l1.08 1.897zm3.226 6.466c.433.855.969 1.576 1.607 2.162.639.587 1.33.998 2.076 1.234a4.023 4.023 0 002.258.06c.725-.19 1.259-.479 1.6-.867.34-.387.525-.84.552-1.36.028-.52-.063-1.074-.273-1.663l-.031-.136 3.526 1.684c.086.045.189.078.307.1a.758.758 0 00.36-.02l1.42-.379c.12-.035.202-.099.245-.19.042-.09.035-.192-.02-.302l-3.517-6.942a.516.516 0 00-.25-.233.484.484 0 00-.356-.029l-1.571.417c-.121.036-.203.1-.245.19-.043.091-.036.192.02.303l2.117 4.18-3.572-1.85a.844.844 0 00-.304-.112.943.943 0 00-.393.01l-.929.262c-.126.025-.209.086-.249.182-.04.096-.031.2.025.31l.848 1.675c.25.493.34.903.271 1.228-.069.326-.343.553-.821.682-.458.118-.89.071-1.294-.141-.405-.212-.737-.575-.997-1.088a3.93 3.93 0 01-.295-.751 1.204 1.204 0 01-.015-.647.876.876 0 01.346-.478.555.555 0 00.142-.262c.015-.083-.008-.185-.07-.306l-1-1.977a.437.437 0 00-.217-.203.44.44 0 00-.3-.029 2.427 2.427 0 00-.934.569c-.287.27-.505.625-.657 1.062-.151.437-.19.962-.113 1.574.076.612.31 1.306.703 2.08zm4.108 7.95a.484.484 0 00.252.247.528.528 0 00.343.038l2.144-.479c.122-.03.206-.091.252-.18.046-.09.043-.19-.008-.303l-.887-1.938a.538.538 0 00-.249-.259.484.484 0 00-.354-.042l-2.143.478a.344.344 0 00-.237.5l.887 1.937zm2.66 6.696c.412.977.922 1.737 1.528 2.281a4.554 4.554 0 002.104 1.076c.796.174 1.662.197 2.597.07.326-.036.685-.088 1.078-.158.392-.069.783-.14 1.173-.215.39-.074.747-.147 1.07-.219.901-.21 1.597-.58 2.087-1.11.49-.53.773-1.176.851-1.939.078-.763-.065-1.588-.428-2.475-.39-.95-.89-1.698-1.504-2.244a4.752 4.752 0 00-2.095-1.099c-.783-.185-1.641-.214-2.576-.087a28.644 28.644 0 00-2.27.372c-.388.08-.739.153-1.052.22-.897.221-1.601.592-2.113 1.112a3.083 3.083 0 00-.883 1.906c-.077.75.068 1.587.433 2.51zm2.354-.725c-.214-.522-.192-.93.065-1.224.257-.295.73-.522 1.42-.683.329-.06.67-.127 1.025-.2.354-.071.714-.137 1.08-.195.366-.059.71-.111 1.032-.158.701-.104 1.278-.063 1.732.123.454.186.797.548 1.03 1.086.212.547.188.965-.072 1.254-.26.29-.73.507-1.414.653-.31.077-.645.15-1.007.22-.362.069-.722.134-1.08.195-.359.062-.707.113-1.044.153-.71.109-1.295.065-1.753-.132-.459-.196-.797-.56-1.014-1.092zm.998 8.795c.07.203.165.34.285.412.12.072.207.117.26.134l3.856 1.699-2.417 2.493a1.142 1.142 0 00-.142.21c-.06.104-.057.252.01.444l.702 2.048c.055.16.15.255.286.286.136.03.253 0 .352-.094l4.04-4.123 6.845 2.747c.14.06.262.044.368-.046.107-.09.136-.204.088-.343l-.78-2.272c-.066-.192-.159-.324-.279-.396a4.087 4.087 0 00-.287-.16l-3.914-1.608 2.491-2.536a.94.94 0 00.162-.208c.061-.098.057-.249-.012-.452l-.709-2.063a.398.398 0 00-.283-.279.354.354 0 00-.355.086l-4.066 4.15-6.895-2.998c-.14-.06-.263-.044-.37.046-.105.09-.135.205-.087.343l.851 2.48z",
      "M403.704 308.28a.516.516 0 00.032-.36.513.513 0 00-.186-.297l-1.378-1.076c-.102-.074-.202-.1-.3-.078-.099.021-.174.088-.228.2l-1.892 3.933-.596-2.39a23.481 23.481 0 00-.398-2.275 6.815 6.815 0 00-.663-1.783 4.074 4.074 0 00-1.101-1.28c-.593-.46-1.185-.705-1.778-.733-.593-.03-1.16.161-1.701.57-.541.41-1.022 1.051-1.443 1.925a5.886 5.886 0 00-.491 3.715 5.19 5.19 0 00.615 1.628c.292.498.656.92 1.09 1.266.081.064.164.088.247.072.082-.016.148-.075.197-.177l.917-1.905a.837.837 0 00.081-.365.595.595 0 00-.153-.383 3.594 3.594 0 01-.453-.66 1.93 1.93 0 01-.227-.794c-.02-.285.041-.574.183-.869.21-.437.461-.667.754-.689.292-.022.594.086.905.323.265.203.486.55.663 1.042.176.491.332 1.148.469 1.971.136.823.286 1.855.452 3.099l.638 2.653c.034.267.108.471.221.613.113.142.2.24.262.295l.972.75a.36.36 0 00.292.074c.104-.019.182-.084.236-.196l3.762-7.82zm2.872-6.204c.423-1.02.634-1.943.634-2.768 0-.824-.168-1.546-.503-2.167a4.318 4.318 0 00-1.356-1.523c-.484-.334-1-.511-1.547-.53a2.5 2.5 0 00-1.502.42 3.767 3.767 0 00-.451-1.385 3.112 3.112 0 00-.987-1.022c-.536-.357-1.1-.502-1.695-.437s-1.16.331-1.695.799c-.536.468-.985 1.14-1.347 2.014-.363.876-.544 1.695-.542 2.458 0 .764.15 1.435.446 2.016.297.58.713 1.05 1.249 1.405.436.303.874.46 1.315.472a2.61 2.61 0 001.182-.224c.031.574.178 1.141.44 1.701s.654 1.022 1.175 1.384c.563.38 1.168.54 1.816.478.648-.061 1.27-.347 1.866-.857.595-.51 1.096-1.255 1.502-2.234zm-6.266-3.968c-.203.49-.463.793-.78.912-.318.119-.65.064-.994-.165a1.614 1.614 0 01-.511-.623 1.873 1.873 0 01-.166-.838 2.55 2.55 0 01.203-.932c.194-.469.454-.77.778-.904.324-.135.654-.077.99.172.229.156.397.36.506.612.11.253.164.535.163.846 0 .31-.064.617-.189.92zm4.33 2.983c-.203.49-.486.821-.85.993-.365.173-.757.117-1.177-.166a1.604 1.604 0 01-.597-.724 2.33 2.33 0 01-.17-.958c.008-.345.081-.684.22-1.017.206-.5.491-.834.853-1.001.362-.167.748-.111 1.157.168.266.183.463.423.59.72.127.297.19.616.19.957a2.69 2.69 0 01-.216 1.028zm5.135-7.44a.484.484 0 00-.005-.353.528.528 0 00-.217-.269l-1.858-1.17c-.109-.063-.211-.08-.307-.049-.095.031-.164.105-.207.221l-.735 2a.538.538 0 00-.006.36c.04.122.113.215.222.279l1.858 1.17a.344.344 0 00.52-.188l.735-2zm2.37-6.424c.334-1.03.46-1.959.377-2.785-.082-.827-.34-1.55-.773-2.17a5.05 5.05 0 00-1.704-1.521c-.52-.298-1.03-.463-1.529-.495-.5-.03-.967.049-1.402.24a3.254 3.254 0 00-1.145.847 3.691 3.691 0 00-.738 1.317c-.18.558-.27 1.018-.268 1.38.001.362.034.702.097 1.018l-1.863-1.331 1.51-4.667a.504.504 0 00-.01-.35.497.497 0 00-.236-.263l-1.403-.828c-.111-.06-.215-.07-.31-.03a.358.358 0 00-.202.238l-2.088 6.454a.668.668 0 00-.002.417c.045.139.138.26.282.367l4.996 3.572c.086.063.18.084.281.064.101-.02.17-.084.204-.192l.688-2.124a.67.67 0 00.01-.335 5.18 5.18 0 00-.103-.424 1.98 1.98 0 01-.066-.537c0-.201.04-.426.12-.672.17-.526.438-.851.804-.976.367-.124.775-.06 1.227.193.33.19.586.432.769.728a2.24 2.24 0 01.233 1.89c-.083.257-.194.47-.331.639a1.027 1.027 0 01-.503.344c-.197.06-.424.067-.682.02a.32.32 0 00-.267.055.577.577 0 00-.184.296l-.698 2.157a.404.404 0 00.013.288c.04.096.105.17.195.223.57.291 1.156.374 1.76.25.603-.125 1.165-.462 1.686-1.01.521-.549.94-1.311 1.256-2.287zm2.335-8.219c.055-.207.052-.374-.009-.5a1.502 1.502 0 00-.142-.256l-2.27-3.55 3.392-.738c.05-.01.128-.042.235-.096.107-.053.187-.178.238-.374l.548-2.095c.043-.164.017-.296-.08-.397a.366.366 0 00-.345-.116l-5.646 1.197-4.18-6.078c-.082-.127-.193-.182-.332-.166-.138.017-.226.096-.263.237l-.608 2.324c-.052.196-.047.358.013.484.06.127.11.224.15.293l2.37 3.506-3.547.747c-.05.014-.11.037-.181.069-.106.048-.186.176-.24.383l-.553 2.11a.398.398 0 00.082.39.354.354 0 00.343.124l5.683-1.204 4.082 6.314c.084.127.195.182.333.166.138-.017.226-.096.263-.237l.664-2.537z",
      "M283.633 412.312c1.03-.335 1.854-.778 2.475-1.33.622-.551 1.056-1.185 1.304-1.9a5.05 5.05 0 00.23-2.271c-.062-.596-.228-1.106-.496-1.529a2.975 2.975 0 00-1.017-.994 3.254 3.254 0 00-1.358-.43 3.691 3.691 0 00-1.499.176c-.558.181-.983.378-1.275.592a5.29 5.29 0 00-.767.676l-.015-2.29 4.665-1.516a.504.504 0 00.277-.214.497.497 0 00.075-.345l-.154-1.622c-.017-.125-.07-.214-.158-.268a.359.359 0 00-.31-.024l-6.451 2.097a.668.668 0 00-.339.243.735.735 0 00-.132.443l.04 6.141c0 .107.037.196.113.266.076.07.168.088.275.053l2.123-.69a.67.67 0 00.277-.188 5.18 5.18 0 00.284-.332c.1-.128.232-.25.396-.37.163-.117.368-.217.614-.297.526-.17.946-.144 1.262.08.316.223.504.591.564 1.105.04.379-.006.729-.139 1.05a2.24 2.24 0 01-1.392 1.298c-.258.084-.495.12-.712.107a1.027 1.027 0 01-.574-.205 1.427 1.427 0 01-.416-.54.32.32 0 00-.202-.184.577.577 0 00-.348.024l-2.155.7a.404.404 0 00-.226.18.456.456 0 00-.067.29c.1.631.376 1.155.831 1.57.455.415 1.058.673 1.808.773.75.1 1.613-.008 2.589-.325zm10.402-3.667c.894-.345 1.665-.807 2.312-1.384.648-.577 1.126-1.224 1.435-1.942a4.024 4.024 0 00.284-2.241c-.117-.74-.351-1.3-.703-1.678a2.179 2.179 0 00-1.299-.685c-.514-.08-1.075-.044-1.682.106l-.138.017 2.026-3.34c.054-.082.097-.18.131-.296a.758.758 0 00.015-.36l-.235-1.45c-.023-.124-.078-.212-.165-.263-.086-.051-.187-.055-.303-.01l-7.257 2.807a.517.517 0 00-.257.227.485.485 0 00-.064.35l.259 1.606c.023.124.078.211.165.262.086.052.187.055.303.01l4.37-1.69-2.197 3.37a.844.844 0 00-.141.291.944.944 0 00-.03.392l.168.951c.013.128.066.216.157.266.092.049.196.051.311.006l1.751-.677c.516-.2.932-.249 1.25-.148.316.101.515.396.595.885.073.468-.017.893-.269 1.274-.251.382-.645.676-1.181.883a3.93 3.93 0 01-.777.22c-.245.04-.46.023-.645-.05a.876.876 0 01-.442-.392.555.555 0 00-.246-.168c-.081-.023-.185-.01-.311.04l-2.067.799a.437.437 0 00-.224.195.44.44 0 00-.058.295c.073.346.23.675.472.987.242.311.572.564.992.759.42.194.938.284 1.555.269.617-.015 1.33-.18 2.14-.493zm8.241-3.472a.484.484 0 00.253-.248.528.528 0 00.045-.342l-.435-2.153c-.028-.123-.087-.208-.175-.256-.088-.048-.19-.047-.303.002l-1.956.848a.538.538 0 00-.263.243.484.484 0 00-.05.353l.435 2.153a.344.344 0 00.494.247l1.955-.847zm6.618-2.898c.95-.47 1.678-1.025 2.184-1.663.506-.638.822-1.36.947-2.165.125-.805.096-1.67-.088-2.596-.056-.324-.13-.68-.223-1.067a85.91 85.91 0 00-.285-1.158 37.347 37.347 0 00-.284-1.055c-.265-.887-.676-1.558-1.234-2.015-.559-.457-1.22-.701-1.987-.733-.766-.03-1.581.162-2.445.578-.924.445-1.64.991-2.15 1.637a4.752 4.752 0 00-.968 2.157c-.138.793-.115 1.652.068 2.577a28.647 28.647 0 00.509 2.243c.103.383.197.728.284 1.037.274.882.687 1.562 1.237 2.042.55.48 1.203.735 1.956.766.754.03 1.58-.164 2.479-.585zm-.867-2.305c-.508.245-.917.248-1.226.009-.31-.239-.565-.698-.767-1.377-.08-.324-.168-.66-.261-1.01-.094-.35-.18-.705-.261-1.066-.08-.362-.154-.702-.22-1.021-.146-.693-.14-1.272.018-1.736.158-.464.498-.829 1.022-1.094.533-.244.952-.246 1.256-.004.304.241.55.699.736 1.372.097.304.19.635.281.991.09.357.178.713.26 1.067.084.354.156.698.217 1.032.15.703.142 1.29-.026 1.759-.168.469-.511.828-1.03 1.078zm8.596-1.747c.187-.104.306-.221.356-.352.05-.131.078-.224.086-.28l.996-4.094 2.878 1.942c.042.028.12.063.232.103.113.04.258.012.435-.087l1.893-1.051c.148-.082.225-.193.232-.332a.366.366 0 00-.155-.33l-4.767-3.254 1.503-7.22c.034-.148-.002-.267-.11-.355-.107-.09-.225-.098-.353-.027l-2.1 1.167c-.177.098-.29.213-.34.344-.05.13-.086.235-.108.311l-.896 4.136-2.991-2.047a1.295 1.295 0 00-.176-.084c-.108-.043-.255-.013-.442.091l-1.908 1.06a.398.398 0 00-.224.328.354.354 0 00.147.334l4.799 3.275-1.742 7.314c-.034.148.002.266.11.355.107.089.225.098.353.026l2.292-1.273z",
      "M127.553 399.384c.982.506 1.883.794 2.705.862.82.069 1.555-.038 2.201-.32a4.318 4.318 0 001.631-1.223c.374-.455.593-.954.658-1.497a2.5 2.5 0 00-.294-1.532 3.767 3.767 0 001.419-.334 3.112 3.112 0 001.1-.898c.4-.504.593-1.055.578-1.653-.015-.598-.234-1.183-.655-1.756-.421-.573-1.053-1.076-1.895-1.51-.842-.435-1.643-.684-2.404-.746-.76-.063-1.443.03-2.046.276a3.654 3.654 0 00-1.505 1.127c-.338.41-.53.833-.58 1.272a2.61 2.61 0 00.125 1.197 4.563 4.563 0 00-1.732.295 3.437 3.437 0 00-1.477 1.056 2.708 2.708 0 00-.628 1.77c.007.65.24 1.294.698 1.93.458.636 1.158 1.198 2.1 1.684zm4.478-5.912c-.471-.244-.753-.528-.844-.855-.092-.326-.01-.652.247-.976.184-.21.405-.362.664-.457.258-.095.54-.127.848-.095.307.031.611.125.912.28.451.233.73.516.837.85.106.335.021.659-.255.973a1.396 1.396 0 01-.653.453c-.26.088-.546.118-.856.091a2.397 2.397 0 01-.9-.264zm-3.335 4.065c-.471-.243-.778-.553-.919-.93-.141-.378-.053-.764.264-1.159.21-.26.467-.438.771-.535a2.33 2.33 0 01.97-.09c.342.038.674.14.995.305.48.248.79.56.926.934.136.375.048.755-.264 1.14-.205.249-.461.425-.767.527-.307.102-.63.138-.97.108a2.69 2.69 0 01-1.006-.3zm9.118 6.834c1.01.45 1.926.687 2.75.709.824.022 1.55-.126 2.18-.444a4.318 4.318 0 001.56-1.314c.347-.474.538-.985.572-1.532a2.5 2.5 0 00-.38-1.512 3.767 3.767 0 001.397-.414c.4-.217.75-.536 1.049-.958.37-.526.532-1.087.483-1.683-.049-.596-.3-1.168-.753-1.716s-1.112-1.016-1.977-1.402c-.865-.386-1.679-.589-2.442-.609-.763-.02-1.439.111-2.027.392a3.654 3.654 0 00-1.44 1.21c-.314.428-.483.862-.506 1.302-.024.44.04.836.192 1.188a4.563 4.563 0 00-1.713.393 3.437 3.437 0 00-1.416 1.137 2.708 2.708 0 00-.527 1.803c.044.649.312 1.278.806 1.888.494.609 1.224 1.13 2.192 1.562zm4.138-6.155c-.484-.216-.78-.485-.89-.806-.11-.32-.047-.65.19-.989.173-.22.385-.384.638-.493.252-.11.533-.157.842-.143.308.014.617.09.926.228.463.207.758.474.883.802.125.328.059.656-.2.986-.161.224-.37.387-.625.489a2.102 2.102 0 01-.85.14c-.31-.01-.615-.081-.914-.214zm-3.1 4.247c-.484-.216-.808-.509-.97-.878-.163-.369-.096-.759.198-1.17.196-.272.442-.464.74-.578a2.33 2.33 0 01.963-.145c.344.018.68.1 1.01.248.494.22.82.514.978.88.157.367.09.751-.2 1.153-.19.26-.436.45-.736.57-.3.119-.62.173-.962.163a2.69 2.69 0 01-1.021-.243zm7.278 5.327a.484.484 0 00.353.005.528.528 0 00.275-.21l1.22-1.825c.067-.107.086-.209.058-.305-.028-.096-.1-.168-.215-.214l-1.98-.79a.538.538 0 00-.358-.015.484.484 0 00-.286.214l-1.22 1.826a.344.344 0 00.173.525l1.98.79zm6.737 2.656c1.004.342 1.91.467 2.72.376a4.554 4.554 0 002.203-.856c.659-.479 1.252-1.11 1.779-1.893.19-.267.39-.57.599-.91.209-.338.415-.678.619-1.019.204-.34.386-.656.548-.945.442-.813.628-1.578.559-2.297-.07-.718-.364-1.36-.882-1.925s-1.23-1.007-2.133-1.326c-.968-.34-1.86-.464-2.677-.37a4.752 4.752 0 00-2.213.835c-.659.461-1.252 1.083-1.779 1.866a28.644 28.644 0 00-1.232 1.942c-.198.343-.376.654-.534.933-.432.816-.623 1.589-.575 2.317.048.728.327 1.37.836 1.927.51.556 1.23 1.005 2.162 1.345zm1.023-2.24c-.532-.187-.822-.475-.87-.863-.049-.388.096-.893.435-1.514.172-.286.35-.586.532-.898.181-.313.372-.625.572-.937.2-.313.39-.604.569-.876.388-.592.802-.996 1.243-1.212.44-.215.94-.23 1.496-.046.55.205.846.501.889.887.043.386-.108.883-.454 1.49-.147.283-.315.582-.504.898-.19.316-.38.629-.573.937-.192.31-.386.603-.58.881-.391.603-.813 1.01-1.264 1.222-.452.212-.948.222-1.49.031zm7.298 4.86c.206.06.373.061.5.004.129-.057.215-.102.26-.136l3.605-2.182.654 3.41c.009.05.039.129.09.237.05.109.173.191.368.247l2.08.6c.163.047.296.024.4-.07a.366.366 0 00.125-.342l-1.058-5.674 6.18-4.028c.128-.08.186-.19.173-.329-.013-.138-.09-.228-.23-.268l-2.309-.666c-.195-.056-.356-.056-.484.001a4.087 4.087 0 00-.297.144l-3.562 2.282-.66-3.565a1.294 1.294 0 00-.064-.182c-.046-.107-.171-.19-.377-.25l-2.097-.605a.398.398 0 00-.39.073.354.354 0 00-.134.34l1.064 5.711-6.413 3.925c-.129.08-.186.19-.174.328.013.14.09.229.23.27l2.52.726z",
      "M32.33 282.971a.484.484 0 00.214.281c.108.068.219.097.334.087l11.212-.836c.125-.013.216-.063.273-.15a.358.358 0 00.033-.31l-.6-2.045a.695.695 0 00-.083-.195 1.15 1.15 0 00-.144-.16l-4.165-3.504a.511.511 0 00-.656-.072l-1.14 1.162a.353.353 0 00-.111.28c.007.103.065.203.176.3l2.351 2.008-8.003.6a.344.344 0 00-.306.46l.614 2.094zm2.084 6.919c.314.905.748 1.692 1.301 2.36.554.667 1.184 1.168 1.89 1.502.707.334 1.45.455 2.23.364.744-.09 1.312-.305 1.702-.643.39-.338.634-.763.731-1.274.097-.511.082-1.073-.047-1.685l-.012-.139 3.267 2.144c.08.057.176.104.29.141a.758.758 0 00.36.028l1.458-.183c.124-.019.214-.07.268-.155.054-.085.061-.186.02-.303l-2.547-7.352a.516.516 0 00-.217-.265.484.484 0 00-.349-.076l-1.613.2c-.125.02-.214.072-.268.156-.055.085-.061.186-.02.303l1.533 4.427-3.29-2.315a.844.844 0 00-.286-.151.944.944 0 00-.39-.044l-.957.134c-.128.009-.218.058-.27.148a.358.358 0 00-.018.31l.614 1.775c.181.522.216.94.103 1.253-.112.313-.414.501-.905.564-.47.056-.891-.05-1.263-.314-.373-.265-.653-.669-.841-1.212a3.93 3.93 0 01-.191-.785 1.204 1.204 0 01.072-.642.876.876 0 01.407-.428c.092-.08.15-.16.176-.24.026-.08.017-.185-.027-.312l-.726-2.094a.437.437 0 00-.187-.23.44.44 0 00-.292-.07 2.427 2.427 0 00-1.004.438c-.32.23-.584.551-.793.964-.21.412-.317.927-.324 1.544-.007.617.131 1.336.415 2.157zm3.693 9.548c.068.168.17.284.307.35.136.067.244.108.324.125l10.272 2.057c.134.03.264.05.39.06.126.01.275.005.45-.017l1.509-.284c.123-.026.21-.08.263-.162.052-.081.052-.185.001-.31l-2.97-7.32a.537.537 0 00-.589-.327l-1.7.306a.39.39 0 00-.268.173.306.306 0 00-.02.29l1.908 4.703-10.287-2.05a.273.273 0 00-.167-.006.32.32 0 00-.227.138c-.049.074-.054.158-.016.252l.82 2.022zm3.238 7.747c.05.113.134.196.25.25.117.052.231.066.343.04l2.147-.462c.123-.03.207-.09.254-.178.047-.09.044-.19-.006-.304l-.872-1.944a.538.538 0 00-.247-.26.484.484 0 00-.354-.046l-2.147.462a.344.344 0 00-.24.497l.872 1.945zm2.795 6.259c.481.97 1.04 1.721 1.676 2.255.637.535 1.327.872 2.07 1.013a5.05 5.05 0 002.281-.103c.58-.15 1.06-.387 1.44-.714.379-.326.658-.71.835-1.15.178-.442.254-.91.228-1.407a3.691 3.691 0 00-.393-1.458c-.26-.525-.518-.917-.771-1.175a5.29 5.29 0 00-.781-.66l2.263-.349 2.18 4.395c.055.11.14.192.252.242.114.051.231.06.352.024l1.582-.388c.122-.035.202-.1.243-.196a.358.358 0 00-.022-.31l-3.014-6.077a.668.668 0 00-.29-.3.735.735 0 00-.458-.065l-6.07.934a.342.342 0 00-.246.15c-.059.086-.063.18-.013.28l.993 2a.67.67 0 00.226.247c.106.074.229.151.37.232.14.081.282.194.423.338.14.144.268.333.384.565.245.495.28.915.105 1.26-.175.345-.512.585-1.012.72-.368.094-.721.1-1.059.015a2.24 2.24 0 01-1.486-1.189 1.954 1.954 0 01-.21-.689c-.02-.217.02-.416.119-.597.099-.181.257-.345.474-.49a.32.32 0 00.152-.227.577.577 0 00-.074-.34l-1.008-2.03a.404.404 0 00-.21-.198.456.456 0 00-.296-.024c-.61.19-1.088.54-1.433 1.051-.344.51-.512 1.145-.501 1.901.01.757.243 1.595.7 2.514zm4.07 7.509c.105.186.224.303.355.352.131.049.225.076.281.083l4.104.955-1.913 2.898c-.028.042-.062.12-.101.233-.04.113-.01.258.091.434l1.07 1.882c.084.147.195.223.334.229a.366.366 0 00.33-.158l3.205-4.8 7.235 1.431c.148.033.266-.005.354-.113.087-.108.095-.226.023-.354l-1.188-2.088c-.1-.176-.216-.289-.347-.337a4.087 4.087 0 00-.313-.105l-4.144-.854 1.979-2.954a.94.94 0 00.12-.234c.042-.108.01-.255-.096-.442l-1.079-1.896a.398.398 0 00-.33-.221.354.354 0 00-.332.15l-3.227 4.831-7.331-1.668c-.149-.033-.266.005-.354.113-.088.108-.095.226-.023.354l1.296 2.279z",
      "M38.954 173.95a.516.516 0 00-.037-.36.513.513 0 00-.24-.254l-1.558-.792c-.115-.053-.218-.06-.31-.02-.092.04-.154.12-.185.24l-1.103 4.223-1.043-2.23a23.481 23.481 0 00-.827-2.158 6.815 6.815 0 00-.992-1.622 4.074 4.074 0 00-1.326-1.046c-.67-.338-1.298-.465-1.886-.38-.587.086-1.107.381-1.56.887-.452.505-.801 1.227-1.046 2.165a5.886 5.886 0 00.229 3.74 5.19 5.19 0 00.915 1.48c.383.433.82.777 1.312 1.034.093.048.178.055.257.023.078-.032.131-.102.16-.211l.534-2.046a.837.837 0 00.01-.373.595.595 0 00-.224-.347 3.595 3.595 0 01-.57-.56 1.93 1.93 0 01-.376-.737 1.716 1.716 0 01.014-.888c.122-.469.325-.742.607-.82.283-.078.6-.03.95.144.3.148.583.446.85.895.268.448.547 1.063.839 1.845.29.781.637 1.766 1.037 2.954l1.135 2.482c.085.256.196.442.334.56.139.118.243.197.314.24l1.098.548a.36.36 0 00.3.018c.098-.039.163-.118.194-.238l2.194-8.396zm2.17-6.543c.316-1.012.417-1.921.304-2.728a4.554 4.554 0 00-.914-2.18c-.497-.645-1.143-1.222-1.94-1.727a17.073 17.073 0 00-.925-.575c-.345-.2-.69-.397-1.036-.592a37.346 37.346 0 00-.96-.523c-.824-.42-1.594-.586-2.31-.497-.716.089-1.35.4-1.9.933-.552.533-.975 1.256-1.27 2.168-.314.976-.414 1.872-.297 2.685.116.814.414 1.544.892 2.19.479.647 1.117 1.223 1.913 1.729a28.647 28.647 0 001.974 1.18c.348.189.664.359.947.51.828.409 1.605.58 2.332.512a3.083 3.083 0 001.904-.887c.542-.524.971-1.257 1.287-2.198zm-2.266-.963c-.173.537-.453.835-.84.894-.386.059-.894-.073-1.525-.395-.29-.165-.594-.334-.911-.508a26.15 26.15 0 01-.952-.547 70.972 70.972 0 01-.89-.545c-.604-.372-1.018-.776-1.245-1.21-.227-.435-.256-.933-.087-1.495.191-.554.479-.859.863-.912.385-.054.886.084 1.502.414.287.14.59.3.911.48.321.181.639.363.952.548.314.184.613.37.896.556.614.375 1.032.786 1.256 1.231.223.446.247.942.07 1.49zm5.928-9.494c.39-1.01.567-1.93.53-2.76-.035-.83-.252-1.567-.65-2.21a5.05 5.05 0 00-1.617-1.613c-.502-.327-1.002-.52-1.5-.579a2.975 2.975 0 00-1.412.161 3.254 3.254 0 00-1.191.783c-.349.355-.619.78-.81 1.274-.21.547-.326 1-.345 1.362a5.29 5.29 0 00.04 1.022l-1.785-1.433 1.768-4.576a.504.504 0 00.008-.35.497.497 0 00-.22-.276l-1.355-.904c-.108-.066-.21-.081-.308-.046a.358.358 0 00-.214.225l-2.445 6.327a.668.668 0 00-.025.417c.037.14.123.268.261.382L38.305 158a.342.342 0 00.277.08c.103-.015.174-.075.215-.18l.805-2.083a.67.67 0 00.029-.333 5.18 5.18 0 00-.08-.43 1.98 1.98 0 01-.036-.54c.012-.2.064-.422.157-.664.2-.515.485-.825.858-.929.373-.104.777-.017 1.214.26.319.208.561.465.727.771a2.24 2.24 0 01.128 1.899c-.098.252-.22.46-.367.62-.146.161-.32.266-.52.316-.201.05-.428.043-.682-.019a.32.32 0 00-.27.04.577.577 0 00-.2.286l-.818 2.114a.404.404 0 00-.003.29.456.456 0 00.182.233 2.606 2.606 0 001.743.347c.61-.091 1.19-.396 1.74-.915.551-.518 1.012-1.256 1.382-2.213zm3.096-8.268a.484.484 0 00.015-.353.528.528 0 00-.202-.28l-1.79-1.272c-.105-.07-.206-.092-.303-.066-.098.025-.17.095-.22.209l-.845 1.956a.538.538 0 00-.026.358c.032.124.1.222.206.291l1.79 1.272a.344.344 0 00.53-.158l.845-1.957zm3.197-6.469c.45-.96.674-1.847.672-2.661a4.554 4.554 0 00-.61-2.284c-.403-.707-.965-1.366-1.686-1.976-.245-.218-.525-.45-.838-.694a85.925 85.925 0 00-.946-.728c-.316-.24-.61-.456-.88-.649-.759-.528-1.5-.797-2.22-.806-.722-.01-1.392.212-2.01.665-.62.453-1.137 1.112-1.552 1.975-.446.925-.666 1.798-.661 2.62.005.822.2 1.586.586 2.292.387.705.94 1.362 1.66 1.972a28.645 28.645 0 001.796 1.437c.319.235.608.446.868.634.764.518 1.511.793 2.24.825a3.083 3.083 0 002.007-.62c.609-.445 1.134-1.112 1.574-2.002zm-2.114-1.262c-.245.508-.562.765-.953.771-.391.006-.877-.194-1.458-.599a66.132 66.132 0 00-.834-.626c-.29-.216-.58-.44-.869-.672a70.969 70.969 0 01-.808-.661c-.546-.451-.902-.907-1.068-1.369-.166-.462-.127-.959.118-1.492.264-.524.59-.786.979-.786.388-.001.866.203 1.432.614.264.177.544.377.837.6.293.223.583.446.869.672.285.225.556.45.812.672.556.456.915.92 1.076 1.391.16.472.116.967-.133 1.485zm5.856-6.613c.104-.188.143-.35.116-.488a1.502 1.502 0 00-.075-.283l-1.32-4.002 3.47.127c.05.002.135-.01.252-.035.117-.025.225-.126.323-.304l1.05-1.893c.083-.148.09-.283.022-.404a.366.366 0 00-.306-.199l-5.767-.24-2.542-6.924c-.049-.144-.143-.225-.28-.243-.139-.019-.243.036-.314.164l-1.166 2.1c-.098.178-.134.336-.107.473.027.138.051.245.073.321l1.427 3.984-3.553-.153a.94.94 0 00-.262.02c-.114.02-.223.123-.327.31l-1.059 1.909a.398.398 0 00-.017.396.354.354 0 00.302.206l5.804.242 2.39 7.13c.049.143.142.224.28.243.138.018.243-.037.314-.165l1.272-2.292z",
      [
        "M112.867 68.608c.795-.557 1.38-1.142 1.755-1.756.375-.614.568-1.252.58-1.914.01-.662-.133-1.343-.43-2.043-.245-.586-.596-.998-1.052-1.236-.456-.238-.907-.332-1.353-.28.133-.204.248-.457.346-.76.098-.302.148-.643.15-1.024a2.937 2.937 0 00-.255-1.174c-.275-.647-.66-1.104-1.156-1.37-.495-.265-1.066-.337-1.71-.215-.645.12-1.342.444-2.09.968l-4.059 2.844a.516.516 0 00-.195.281.484.484 0 00.022.356l4.397 10.344a.344.344 0 00.52.153l4.53-3.174zm-3.472-6.283l-1.774 1.242-.993-2.36 1.857-1.301c.378-.266.699-.349.96-.25.262.098.465.318.607.66.142.34.163.694.062 1.06-.1.367-.34.683-.72.949zm2.127 4.54l-1.925 1.35-1.117-2.626 1.94-1.36c.424-.297.786-.385 1.084-.264.299.122.524.37.677.745.142.34.165.717.068 1.13-.096.411-.339.753-.727 1.025zm10.63-4.18c1.392-.856 2.302-1.863 2.73-3.02.426-1.156.398-2.493-.085-4.01-.158-.471-.32-.944-.485-1.418a27.771 27.771 0 00-.53-1.393c-.286-.724-.654-1.285-1.105-1.683a3.24 3.24 0 00-1.525-.77 4.078 4.078 0 00-1.777.05 6.306 6.306 0 00-1.833.781c-1.403.863-2.31 1.885-2.722 3.065-.413 1.18-.379 2.517.102 4.008.158.472.32.945.486 1.42.166.473.337.94.515 1.4.296.719.669 1.277 1.12 1.675.45.399.955.65 1.516.755a4.108 4.108 0 001.763-.072 6.477 6.477 0 001.83-.787zm-1.075-2.198c-.538.33-1.017.413-1.436.248-.42-.166-.78-.62-1.077-1.363-.184-.47-.35-.917-.498-1.342a33.955 33.955 0 01-.437-1.34c-.25-.773-.276-1.433-.076-1.98.2-.546.559-.979 1.078-1.298.518-.319.992-.399 1.421-.24.43.16.789.615 1.077 1.364.181.445.346.88.495 1.304.149.425.3.881.455 1.37.25.772.275 1.432.076 1.978-.2.547-.56.98-1.078 1.299zm9.1-2.755a.516.516 0 00.238-.272.513.513 0 00.025-.348l-1.764-6.097 5.436 4.248c.042.029.112.065.212.107.1.043.228.022.387-.063l1.582-.846a.534.534 0 00.24-.627l-3.104-10.79c-.039-.12-.107-.198-.204-.236a.358.358 0 00-.309.031l-1.79.958a.516.516 0 00-.228.256.484.484 0 00-.02.356l1.831 6.329-5.518-4.472a.465.465 0 00-.208-.12c-.102-.034-.232-.01-.391.076l-1.582.845a.504.504 0 00-.235.26.497.497 0 00-.013.352l3.127 10.797a.344.344 0 00.498.213l1.79-.957zm13.351-6.585c1.507-.691 2.525-1.574 3.056-2.649.53-1.074.618-2.417.264-4.029l-1.54-6.886c-.032-.122-.095-.205-.19-.249a.358.358 0 00-.31.012l-1.983.91a.516.516 0 00-.243.242.484.484 0 00-.042.354l1.533 6.871c.162.732.125 1.354-.112 1.866-.236.512-.662.909-1.277 1.191-.625.287-1.12.312-1.482.075-.363-.236-.63-.718-.803-1.446l-1.534-6.87c-.03-.123-.091-.207-.18-.253-.09-.046-.19-.043-.303.009l-1.984.91a.538.538 0 00-.258.249.484.484 0 00-.042.354l1.556 6.88c.185.808.466 1.448.844 1.92.377.472.83.797 1.36.976.528.18 1.108.227 1.74.142a6.804 6.804 0 001.93-.579zm10.75-4.625c1.482-.577 2.562-1.316 3.24-2.215.679-.9.92-1.928.723-3.086-.117-.705-.356-1.247-.716-1.627-.36-.38-.86-.618-1.503-.713-.642-.095-1.455-.054-2.438.124-.606.09-1.087.139-1.442.144-.355.005-.618-.05-.79-.165a.693.693 0 01-.302-.517 1.15 1.15 0 01.276-.97c.242-.282.588-.51 1.04-.686.4-.156.754-.194 1.063-.115.31.08.509.235.599.466.09.074.181.117.277.128a.62.62 0 00.3-.044l2.112-.823a.387.387 0 00.212-.2.4.4 0 00.037-.278 1.94 1.94 0 00-.56-.971c-.294-.291-.681-.524-1.161-.7-.48-.177-1.023-.256-1.627-.238-.604.017-1.243.157-1.915.419-1.335.52-2.308 1.222-2.919 2.108-.611.885-.833 1.852-.667 2.9.117.706.364 1.254.74 1.646.377.392.87.641 1.48.748.611.107 1.333.096 2.166-.035a13.663 13.663 0 011.555-.179c.399-.016.698.022.897.113.199.092.314.271.345.538.064.35-.051.691-.345 1.024-.294.332-.746.617-1.356.854-.336.131-.634.196-.895.195a1.413 1.413 0 01-.666-.15 1.252 1.252 0 01-.43-.358 1.3 1.3 0 00-.27-.131c-.083-.028-.198-.014-.345.044l-2.018.785a.358.358 0 00-.204.198.524.524 0 00-.045.28c.129.58.433 1.057.912 1.433.48.377 1.112.58 1.9.613.786.032 1.7-.154 2.74-.56z",
        "M167.82 28.232a6.5 6.5 0 102.481 12.761 6.5 6.5 0 00-2.48-12.761zm2.93 10.811l-1.595.31-.31-1.595 1.595-.31.31 1.595zm-.287-3.754a.86.86 0 00-.276.857l.02.106-1.595.31-.02-.106a2.49 2.49 0 01.892-2.464c.373-.28.553-.75.463-1.207a1.251 1.251 0 00-1.429-.964 1.219 1.219 0 00-.963 1.429l-1.596.31a2.844 2.844 0 012.25-3.334 2.882 2.882 0 013.333 2.249 2.826 2.826 0 01-1.079 2.814z",
      ],
    ],
    [
      "M292.79 96.012c.11.058.23.072.36.044a.513.513 0 00.301-.177l1.12-1.343c.076-.1.106-.199.087-.298-.018-.098-.083-.176-.193-.233l-3.87-2.016 2.406-.52c.844-.082 1.606-.19 2.287-.326a6.815 6.815 0 001.803-.606c.521-.269.96-.622 1.314-1.06.479-.578.742-1.162.79-1.754.047-.592-.125-1.165-.517-1.718-.392-.554-1.018-1.055-1.878-1.503a5.886 5.886 0 00-3.698-.609 5.19 5.19 0 00-1.647.564 4.56 4.56 0 00-1.3 1.049c-.066.08-.093.161-.08.244.015.084.072.152.172.204l1.875.976c.11.057.23.088.362.093a.595.595 0 00.388-.141c.2-.163.424-.307.673-.432a1.93 1.93 0 01.801-.202c.285-.01.573.06.863.21.43.224.652.483.665.776.012.292-.105.59-.352.894-.21.259-.565.469-1.062.63-.497.16-1.158.296-1.985.406-.459.061-.983.125-1.572.19l-.739.081-.8.083-2.673.554c-.267.026-.474.093-.62.202a2.585 2.585 0 00-.302.252l-.78.948a.36.36 0 00-.084.29c.016.104.079.184.189.241l7.697 4.007zm4.563 2.525a.484.484 0 00.348.06.528.528 0 00.304-.165l1.487-1.616c.083-.095.118-.192.104-.292-.013-.1-.073-.18-.18-.244l-1.833-1.086a.538.538 0 00-.352-.07.484.484 0 00-.315.167l-1.488 1.616a.344.344 0 00.09.544l1.835 1.086zm6.254 4.206c.9.601 1.759.975 2.577 1.121.817.147 1.584.096 2.299-.152a5.05 5.05 0 001.927-1.225c.429-.418.726-.863.893-1.336.166-.472.216-.943.151-1.414a3.254 3.254 0 00-.503-1.333 3.691 3.691 0 00-1.066-1.068c-.487-.326-.905-.538-1.254-.635a5.29 5.29 0 00-1.006-.184l1.789-1.43 4.079 2.727a.504.504 0 00.34.084.497.497 0 00.316-.154l1.18-1.125c.087-.09.125-.187.112-.29a.358.358 0 00-.173-.259l-5.64-3.769a.668.668 0 00-.4-.115.735.735 0 00-.43.17l-4.8 3.833a.342.342 0 00-.138.253c-.008.103.035.186.129.25l1.856 1.24a.67.67 0 00.32.1c.127.012.273.018.436.018.162 0 .34.028.534.083.194.054.399.154.615.298.459.307.699.654.718 1.04.02.386-.153.762-.52 1.128a2.128 2.128 0 01-.91.54 2.24 2.24 0 01-1.88-.29c-.226-.15-.4-.315-.526-.493a1.027 1.027 0 01-.194-.577 1.427 1.427 0 01.167-.662.32.32 0 00.02-.272.577.577 0 00-.235-.258l-1.884-1.26a.404.404 0 00-.282-.066.456.456 0 00-.267.127 2.606 2.606 0 00-.72 1.625c-.044.614.126 1.247.512 1.898.385.65 1.005 1.261 1.858 1.832zm7.755 5.156c.168.132.323.196.462.191.14-.004.238-.014.292-.029l4.16-.668-.675 3.406c-.01.05-.012.134-.005.254.006.12.09.242.249.367l1.702 1.338c.133.104.265.133.396.085a.366.366 0 00.245-.27l1.151-5.657 7.24-1.411c.149-.026.244-.106.284-.24.04-.133.003-.245-.113-.335l-1.889-1.484c-.16-.125-.309-.186-.449-.18-.14.004-.25.011-.329.02l-4.159.777.728-3.55c.007-.052.01-.117.009-.194-.002-.117-.087-.24-.256-.373l-1.716-1.348a.398.398 0 00-.389-.08.354.354 0 00-.251.265l-1.16 5.693-7.417 1.229c-.15.026-.245.105-.285.239-.04.133-.002.245.113.336l2.062 1.62z",
      "M364.942 198.25c.16 1.094.452 1.994.875 2.701.423.708.937 1.242 1.543 1.603a4.318 4.318 0 001.945.613c.587.039 1.12-.074 1.6-.338a2.5 2.5 0 001.073-1.132c.335.418.701.738 1.098.959.398.22.855.345 1.371.371.643.032 1.203-.133 1.68-.494.477-.36.826-.879 1.046-1.555.22-.676.26-1.483.123-2.42-.137-.938-.402-1.734-.795-2.388-.392-.655-.864-1.156-1.417-1.502a3.654 3.654 0 00-1.792-.566c-.53-.037-.987.053-1.371.27a2.61 2.61 0 00-.9.798 4.563 4.563 0 00-1.25-1.236 3.437 3.437 0 00-1.719-.585 2.708 2.708 0 00-1.804.521c-.525.385-.912.949-1.162 1.692-.25.743-.298 1.64-.144 2.688zm7.414.195c-.077-.525-.01-.92.202-1.184.212-.265.525-.388.938-.368.278.027.53.118.758.273.228.155.419.366.572.634.153.268.254.57.304.905.073.502.005.893-.204 1.175-.21.281-.523.401-.939.36a1.396 1.396 0 01-.748-.266 2.102 2.102 0 01-.573-.643 2.397 2.397 0 01-.31-.886zm-5.247-.342c-.077-.524-.004-.954.22-1.289.225-.335.59-.488 1.096-.46.333.02.628.125.884.315s.468.436.638.736c.17.3.28.628.332.985.079.536.006.968-.22 1.298-.225.33-.585.479-1.08.449a1.646 1.646 0 01-.875-.316 2.385 2.385 0 01-.653-.725 2.69 2.69 0 01-.342-.993zm-.716 9.798c.01.124.063.23.156.318a.528.528 0 00.31.15l2.181.261c.126.012.225-.017.298-.086.073-.069.104-.165.093-.289l-.192-2.122a.538.538 0 00-.148-.327.484.484 0 00-.32-.157l-2.181-.262a.344.344 0 00-.39.392l.193 2.122zm.268 7.85c.049 1.059.263 1.949.644 2.669.38.72.914 1.3 1.601 1.738.687.438 1.49.76 2.412.965.319.079.674.154 1.066.225.391.07.783.139 1.175.204.391.065.751.12 1.08.165.918.115 1.699.008 2.342-.319s1.133-.835 1.47-1.524c.337-.689.488-1.512.455-2.47-.036-1.025-.247-1.901-.634-2.627a4.752 4.752 0 00-1.585-1.755c-.67-.445-1.465-.77-2.386-.974a28.646 28.646 0 00-2.258-.437c-.392-.06-.746-.113-1.064-.158-.917-.103-1.706 0-2.367.311-.66.311-1.156.805-1.488 1.483-.332.677-.486 1.512-.463 2.504zm2.46.134c-.02-.564.141-.939.485-1.126.343-.187.866-.236 1.569-.148.329.056.672.112 1.03.167.357.056.717.12 1.08.191.364.072.705.142 1.024.21.693.145 1.22.383 1.582.714.361.332.558.79.59 1.376.009.586-.158.97-.502 1.152-.343.18-.86.222-1.552.122a17.679 17.679 0 01-1.021-.142c-.363-.06-.724-.124-1.081-.19a20.897 20.897 0 01-1.032-.219c-.705-.144-1.238-.388-1.6-.73-.362-.343-.553-.802-.573-1.377zm-2.128 9.24c-.009.214.03.376.115.487.086.111.15.184.194.22l2.972 2.987-3.16 1.441c-.045.02-.115.068-.208.144-.094.075-.145.214-.154.416l-.09 2.164c-.008.169.046.292.161.37a.366.366 0 00.362.041l5.264-2.368 5.374 5.052c.108.106.228.137.36.092.132-.046.2-.141.207-.288l.101-2.4c.009-.202-.03-.36-.115-.47a4.088 4.088 0 00-.21-.254l-3.06-2.923 3.309-1.483c.046-.024.1-.06.162-.106.093-.07.144-.211.153-.425l.093-2.18a.398.398 0 00-.163-.363.354.354 0 00-.362-.049L373 227.613l-5.33-5.304c-.108-.106-.228-.136-.36-.091-.131.045-.2.14-.206.287l-.11 2.62z",
      "M287.343 364.241a.484.484 0 00.25-.25.528.528 0 00.042-.343l-2.325-11c-.03-.123-.092-.206-.185-.25a.358.358 0 00-.311.008l-1.947.867a.695.695 0 00-.183.11 1.15 1.15 0 00-.14.163l-2.917 4.595a.511.511 0 00.016.66l1.305.974c.092.07.19.094.292.074.102-.021.193-.093.274-.215l1.676-2.598 1.663 7.851a.344.344 0 00.497.242l1.993-.888zm7.338-3.43c.878-.463 1.59-1.059 2.136-1.787a5.998 5.998 0 001.09-2.336 4.75 4.75 0 00-.072-2.401c-.17-.586-.429-1.065-.778-1.435a2.923 2.923 0 00-1.209-.787 3.703 3.703 0 00-1.427-.184c-.493.031-.97.156-1.429.373-.07.037-.146.08-.228.13-.082.05-.153.103-.212.16l1.164-4.135a.294.294 0 00.009-.11.837.837 0 00-.022-.132.32.32 0 00-.16-.212c-.079-.041-.163-.038-.253.01l-1.99 1.05a.685.685 0 00-.314.31c-.06.127-.102.229-.126.305l-1.508 5.33a11.25 11.25 0 00-.38 1.798c-.05.377-.073.76-.072 1.148 0 .389.048.756.142 1.102.234.807.628 1.425 1.18 1.854.551.43 1.21.645 1.978.648.766.003 1.594-.23 2.481-.698zm-.704-2.382c-.299.158-.596.235-.891.232a1.217 1.217 0 01-.782-.286c-.226-.186-.394-.468-.503-.844a2.283 2.283 0 01-.044-1.096c.076-.34.222-.643.438-.91s.468-.477.758-.63c.309-.163.605-.243.887-.239.283.004.538.095.767.274.228.18.395.464.5.856a2.195 2.195 0 01-.376 2.005 2.344 2.344 0 01-.754.638zm8.933-2.307a.484.484 0 00.217-.278.528.528 0 000-.346l-.715-2.076c-.044-.118-.114-.195-.207-.23-.094-.036-.194-.022-.3.042l-1.827 1.097a.538.538 0 00-.23.276.484.484 0 00-.002.357l.715 2.077a.344.344 0 00.522.18l1.827-1.099zm6.444-3.944c.896-.608 1.566-1.263 2.009-1.965.443-.703.685-1.432.724-2.188a5.05 5.05 0 00-.41-2.246c-.226-.555-.527-.998-.901-1.33a2.975 2.975 0 00-1.254-.673 3.254 3.254 0 00-1.424-.035 3.691 3.691 0 00-1.391.585c-.485.33-.839.637-1.06.923a5.29 5.29 0 00-.55.863l-.65-2.195 4.06-2.753a.504.504 0 00.207-.283.497.497 0 00-.024-.352l-.599-1.515c-.05-.116-.126-.187-.227-.214a.358.358 0 00-.304.063l-5.614 3.807a.668.668 0 00-.258.328.735.735 0 00-.003.462l1.745 5.889c.029.103.09.177.182.223.093.047.186.038.279-.025l1.848-1.253a.67.67 0 00.214-.258 5.18 5.18 0 00.18-.398 1.98 1.98 0 01.277-.464c.124-.159.294-.311.508-.457.458-.31.869-.401 1.234-.275.366.127.649.43.85.906.143.353.196.702.158 1.048a2.24 2.24 0 01-.977 1.633 1.954 1.954 0 01-.654.3 1.027 1.027 0 01-.608-.037 1.427 1.427 0 01-.55-.404.32.32 0 00-.245-.12.577.577 0 00-.327.12l-1.876 1.272a.404.404 0 00-.167.236.456.456 0 00.016.296c.27.58.682 1.005 1.235 1.278.552.272 1.203.352 1.95.24.749-.112 1.548-.456 2.397-1.032zm7.502-5.511c.168-.134.266-.269.293-.406.028-.138.04-.235.04-.29l.306-4.203 3.16 1.44c.045.022.127.043.245.065.118.021.256-.032.415-.158l1.694-1.349c.132-.105.19-.227.173-.366a.366.366 0 00-.206-.3l-5.24-2.423.293-7.37c.01-.15-.046-.261-.167-.331-.12-.07-.238-.06-.352.032l-1.88 1.497c-.158.126-.251.258-.279.395a4.087 4.087 0 00-.054.325l-.202 4.226-3.288-1.525a1.295 1.295 0 00-.187-.054c-.113-.024-.254.03-.421.163l-1.707 1.36a.398.398 0 00-.167.36.354.354 0 00.2.306l5.273 2.438-.512 7.502c-.01.151.046.262.167.332.12.07.238.059.353-.032l2.05-1.634z",
      "M128.78 347.42a.516.516 0 00.344.11.513.513 0 00.33-.12l1.345-1.116c.094-.084.141-.176.14-.276 0-.1-.048-.19-.146-.266l-3.438-2.688 2.461-.072c.845.073 1.614.106 2.308.097a6.815 6.815 0 001.883-.266 4.074 4.074 0 001.487-.803c.576-.48.941-1.007 1.096-1.58.155-.573.09-1.168-.194-1.784-.284-.615-.809-1.222-1.573-1.82a5.886 5.886 0 00-3.523-1.274 5.19 5.19 0 00-1.723.253 4.56 4.56 0 00-1.47.795c-.08.066-.12.14-.122.225-.002.085.042.162.13.231l1.666 1.303c.098.076.21.129.339.157a.595.595 0 00.407-.067c.226-.125.473-.225.74-.302a1.93 1.93 0 01.826-.053c.282.042.552.164.81.365.381.299.552.593.511.884-.04.29-.21.562-.509.815-.254.216-.64.358-1.159.425-.518.067-1.193.08-2.026.037-.832-.043-1.874-.116-3.123-.22l-2.729.056c-.268-.023-.483.005-.646.085-.163.08-.278.145-.344.193l-.94.79a.36.36 0 00-.136.27c-.003.104.044.195.142.271l6.836 5.346zm6.123 4.535c.92.613 1.784.999 2.593 1.158.808.16 1.55.134 2.223-.074a4.318 4.318 0 001.757-1.035c.422-.41.695-.882.82-1.415a2.5 2.5 0 00-.123-1.555 3.767 3.767 0 001.448-.174c.43-.148.827-.404 1.193-.77.453-.457.706-.984.757-1.58.051-.595-.1-1.201-.456-1.817-.355-.616-.927-1.187-1.716-1.712-.788-.525-1.557-.86-2.306-1.007-.749-.147-1.437-.131-2.064.048a3.654 3.654 0 00-1.62.953c-.382.369-.621.769-.718 1.199-.096.43-.1.831-.009 1.203a4.563 4.563 0 00-1.754.102c-.6.149-1.129.444-1.585.885a2.708 2.708 0 00-.82 1.69c-.066.647.094 1.312.479 1.995s1.019 1.319 1.9 1.906zm5.106-5.378c-.44-.294-.689-.608-.744-.943-.055-.335.063-.65.354-.943.206-.188.443-.315.71-.38.268-.066.553-.067.854-.001.302.066.594.192.876.38.422.28.668.593.737.938.069.344-.052.656-.361.938-.197.194-.43.32-.7.378a2.102 2.102 0 01-.86-.004 2.397 2.397 0 01-.866-.363zm-3.765 3.67c-.441-.294-.711-.636-.81-1.027-.099-.39.032-.765.391-1.121.238-.235.513-.384.826-.446a2.33 2.33 0 01.973.018c.336.075.655.212.955.412.45.3.723.644.817 1.032.094.388-.036.755-.389 1.103a1.646 1.646 0 01-.82.439 2.385 2.385 0 01-.977 0 2.69 2.69 0 01-.966-.41zm6.943 6.857a.484.484 0 00.349.057.528.528 0 00.303-.165l1.482-1.621c.082-.095.117-.193.103-.292-.013-.1-.074-.181-.18-.244l-1.838-1.08a.538.538 0 00-.352-.069.484.484 0 00-.315.169l-1.482 1.62a.344.344 0 00.092.545l1.838 1.08zm6.549 3.775c.962.496 1.858.77 2.687.824.829.053 1.584-.083 2.267-.41a5.05 5.05 0 001.777-1.434c.379-.465.624-.94.736-1.428.112-.488.11-.962-.008-1.423a3.254 3.254 0 00-.65-1.268 3.691 3.691 0 00-1.18-.941c-.521-.269-.96-.432-1.318-.49a5.29 5.29 0 00-1.02-.07l1.617-1.62 4.36 2.248c.11.057.225.072.347.046a.497.497 0 00.297-.189l1.045-1.25c.077-.1.103-.2.08-.302a.358.358 0 00-.202-.237l-6.028-3.11a.668.668 0 00-.412-.069.735.735 0 00-.407.218l-4.337 4.349a.342.342 0 00-.11.267c.004.103.056.18.157.233l1.984 1.023c.09.047.2.068.328.065a5.18 5.18 0 00.436-.033 1.98 1.98 0 01.54.022c.2.033.414.109.644.228.491.253.769.57.832.952.063.382-.067.775-.39 1.18-.24.294-.521.507-.843.64a2.24 2.24 0 01-1.902-.078 1.954 1.954 0 01-.577-.43 1.027 1.027 0 01-.258-.552c-.028-.205.003-.43.092-.676a.32.32 0 00-.012-.273.577.577 0 00-.262-.23l-2.014-1.039a.404.404 0 00-.287-.034.456.456 0 00-.252.156 2.606 2.606 0 00-.532 1.695c.025.616.266 1.226.722 1.829.457.603 1.14 1.14 2.053 1.61zm8.427 3.95c.197.084.363.105.497.063.133-.041.225-.076.273-.105l3.837-1.742.247 3.464c.003.05.024.132.062.246.037.114.15.21.337.289l1.995.841c.156.066.29.058.404-.022a.366.366 0 00.165-.326l-.381-5.759 6.61-3.271c.138-.065.208-.167.212-.306.003-.139-.062-.237-.198-.294l-2.213-.933c-.187-.079-.347-.098-.481-.056a4.088 4.088 0 00-.312.107l-3.807 1.847-.234-3.618a1.294 1.294 0 00-.043-.189c-.032-.111-.147-.209-.345-.292l-2.01-.848a.398.398 0 00-.397.026.354.354 0 00-.172.322l.383 5.797-6.831 3.142c-.137.064-.208.166-.212.305-.003.14.063.237.198.294l2.416 1.019z",
      "M78.578 245.26a.484.484 0 00-.174-.307.528.528 0 00-.319-.132l-1.95-.12-.222-1.49a.538.538 0 00-.167-.317.42.42 0 00-.326-.122l-1.711-.121a.36.36 0 00-.284.102c-.075.074-.102.178-.082.311l.219 1.473-6.698-.422c-.126-.004-.223.033-.292.112a.358.358 0 00-.074.302l.394 2.643a.89.89 0 00.384.627l7.562 5.304a.793.793 0 00.218.138c.079.034.182.059.31.074l1.639.098a.44.44 0 00.291-.112c.07-.067.096-.162.077-.285l-.805-5.404 1.95.12a.344.344 0 00.367-.414l-.307-2.058zm-4.473 2.12l.412 2.76-4.399-3.004 3.987.244zm3.651-11.261c-.076-1.08-.307-1.988-.692-2.724-.386-.736-.896-1.31-1.53-1.723a5.05 5.05 0 00-2.149-.773c-.593-.082-1.128-.044-1.603.114a2.975 2.975 0 00-1.21.747c-.332.34-.58.744-.745 1.214-.165.47-.228.968-.191 1.497.041.585.13 1.045.267 1.38.137.335.294.638.471.908l-2.225-.538-.346-4.893a.504.504 0 00-.142-.32.497.497 0 00-.316-.157l-1.611-.242c-.125-.014-.225.016-.299.09a.358.358 0 00-.098.294l.478 6.766c.01.147.062.276.155.388.093.112.225.19.398.235l5.97 1.443a.342.342 0 00.285-.045c.086-.057.125-.142.117-.255l-.157-2.227a.67.67 0 00-.116-.314 5.18 5.18 0 00-.254-.355 1.98 1.98 0 01-.262-.473 2.205 2.205 0 01-.14-.669c-.04-.55.088-.953.38-1.205.294-.253.697-.346 1.21-.28.377.052.705.181.986.388a2.24 2.24 0 01.923 1.664c.019.27-.004.509-.068.717a1.027 1.027 0 01-.337.507c-.16.13-.37.221-.625.273a.32.32 0 00-.227.152.577.577 0 00-.06.343l.16 2.261a.404.404 0 00.12.263.456.456 0 00.263.134 2.606 2.606 0 001.725-.427c.513-.341.909-.864 1.187-1.568.278-.703.38-1.567.308-2.59zm-.729-9.57a.484.484 0 00-.132-.327.528.528 0 00-.299-.173l-2.155-.423c-.124-.02-.225 0-.303.064-.078.063-.116.157-.114.28l.033 2.132a.538.538 0 00.124.336c.08.1.183.161.307.182l2.156.422a.344.344 0 00.417-.361l-.034-2.132zm.322-7.845c.031-1.06-.115-1.963-.44-2.71a4.554 4.554 0 00-1.466-1.854c-.651-.49-1.428-.87-2.331-1.144-.312-.103-.66-.205-1.046-.305-.385-.1-.77-.198-1.156-.293-.386-.095-.74-.177-1.065-.246-.907-.184-1.693-.137-2.36.14-.665.278-1.192.748-1.58 1.41-.388.66-.602 1.47-.64 2.428-.043 1.025.102 1.914.432 2.667.33.753.813 1.376 1.448 1.87.634.494 1.403.878 2.306 1.152a28.647 28.647 0 002.218.607c.386.089.736.168 1.05.237.906.173 1.7.129 2.383-.131a3.083 3.083 0 001.596-1.366c.382-.65.599-1.471.65-2.462zm-2.442-.32c-.023.564-.213.926-.57 1.086-.356.16-.88.17-1.575.03-.324-.082-.662-.163-1.014-.245a26.15 26.15 0 01-1.064-.272c-.357-.1-.692-.195-1.004-.286-.68-.197-1.188-.475-1.524-.833-.335-.358-.496-.83-.484-1.416.035-.586.23-.956.587-1.11.356-.155.875-.157 1.558-.005.313.058.649.131 1.007.219.357.088.712.178 1.064.272.351.093.689.191 1.012.295.691.197 1.205.48 1.54.85.334.369.49.84.467 1.415zm2.823-9.06c.025-.212 0-.377-.077-.494a1.502 1.502 0 00-.176-.234l-2.733-3.208 3.261-1.192c.048-.017.121-.06.22-.127.099-.068.16-.202.185-.404l.258-2.15c.02-.168-.024-.295-.133-.382a.366.366 0 00-.358-.068l-5.431 1.954-4.967-5.452c-.1-.115-.217-.154-.352-.12-.135.036-.211.126-.229.271l-.286 2.385c-.024.202.002.361.079.478.076.117.14.207.189.27l2.824 3.15-3.347 1.2a.94.94 0 00-.235.116c-.099.062-.16.2-.186.412l-.26 2.167a.398.398 0 00.134.374.354.354 0 00.357.077l5.466-1.967 4.904 5.7c.1.114.217.154.352.119.135-.035.21-.125.228-.271l.313-2.603z",
      [
        "M114.526 124.869a.484.484 0 00.127-.33.528.528 0 00-.1-.33l-1.85-2.568 2.01-2.218a.538.538 0 00.14-.33.484.484 0 00-.1-.343l-.745-1.017c-.07-.109-.158-.166-.266-.173a.329.329 0 00-.276.115l-2.022 2.231-1.786-2.487c-.077-.1-.166-.154-.266-.16-.1-.008-.192.035-.275.127l-.92 1.015a.538.538 0 00-.14.33.484.484 0 00.101.342l1.786 2.487-2.022 2.231a.484.484 0 00-.127.33.63.63 0 00.1.354l.745 1.017c.077.1.166.154.266.161.1.007.192-.035.275-.127l2.022-2.231 1.85 2.568a.344.344 0 00.552.02l.92-1.014zm11.025-10.356a.516.516 0 00.157-.325.513.513 0 00-.07-.343l-.909-1.494c-.069-.105-.153-.165-.253-.18-.099-.014-.194.022-.283.108l-3.16 3.01.287-2.445c.195-.825.339-1.581.431-2.27a6.815 6.815 0 00.01-1.901 4.074 4.074 0 00-.578-1.587c-.392-.64-.86-1.078-1.404-1.314-.545-.237-1.143-.26-1.793-.067-.651.191-1.327.622-2.03 1.291a5.886 5.886 0 00-1.772 3.301 5.19 5.19 0 000 1.741 4.56 4.56 0 00.573 1.57c.053.088.122.14.205.154.084.014.166-.018.248-.096l1.53-1.459a.837.837 0 00.206-.312.595.595 0 00-.009-.413c-.09-.241-.153-.5-.19-.776a1.93 1.93 0 01.067-.824c.083-.273.242-.523.479-.748.351-.335.667-.46.948-.378.281.082.526.29.733.622.177.283.26.686.252 1.208-.008.522-.094 1.192-.257 2.01-.164.818-.388 1.837-.672 3.059l-.34 2.707c-.062.262-.066.48-.01.652.056.173.103.296.14.368l.646 1.045a.36.36 0 00.247.173c.103.019.2-.015.29-.1l6.28-5.987zm6.435-5.602a.484.484 0 00.172-.308.528.528 0 00-.053-.342l-5.23-9.953c-.062-.11-.144-.173-.247-.19a.358.358 0 00-.297.093l-1.637 1.364a.695.695 0 00-.146.155c-.029.045-.059.11-.09.196l-1.557 5.214a.511.511 0 00.195.63l1.52.584a.353.353 0 00.301-.009c.093-.048.161-.141.206-.281l.906-2.956 3.737 7.102a.344.344 0 00.543.098l1.677-1.397zm4.533-3.629a.484.484 0 00.186-.3.528.528 0 00-.037-.343l-.932-1.989c-.057-.112-.134-.181-.231-.207-.097-.025-.195 0-.294.074l-1.7 1.287a.538.538 0 00-.198.298.484.484 0 00.036.356l.932 1.988a.344.344 0 00.539.123l1.7-1.287zm6.503-4.37c.874-.601 1.515-1.254 1.925-1.957.41-.704.62-1.464.628-2.279.01-.814-.143-1.667-.456-2.557a17.073 17.073 0 00-.373-1.023c-.147-.37-.296-.739-.448-1.106a37.347 37.347 0 00-.43-1.004c-.389-.84-.892-1.446-1.51-1.819-.617-.373-1.308-.52-2.07-.441-.763.078-1.542.384-2.338.92-.851.572-1.483 1.215-1.894 1.926a4.752 4.752 0 00-.652 2.274c-.023.804.122 1.65.435 2.54a28.645 28.645 0 00.823 2.148c.157.364.3.693.43.986.397.834.902 1.448 1.515 1.845a3.083 3.083 0 002.045.479c.75-.077 1.54-.387 2.37-.932zm-1.186-2.158c-.468.315-.872.376-1.212.184-.34-.193-.659-.61-.956-1.254-.126-.309-.26-.63-.402-.962a26.15 26.15 0 01-.41-1.019 70.968 70.968 0 01-.364-.979c-.243-.665-.32-1.239-.23-1.72.09-.483.376-.892.856-1.229.493-.318.907-.379 1.243-.183.335.195.643.613.924 1.253.14.287.279.601.42.941.14.34.277.68.41 1.02.132.338.253.668.36.99.25.674.325 1.256.226 1.744-.1.488-.388.893-.865 1.214zm8.972-3.082c.186-.106.304-.224.353-.355.049-.131.077-.225.084-.28l.967-4.102 2.892 1.922c.042.028.12.062.233.102.113.04.258.01.434-.09l1.886-1.065c.147-.083.224-.194.23-.333a.366.366 0 00-.158-.33l-4.79-3.22 1.453-7.23c.033-.148-.005-.266-.113-.354-.107-.088-.225-.096-.353-.024l-2.091 1.18c-.177.1-.29.216-.339.347a4.087 4.087 0 00-.105.312l-.867 4.142-3.006-2.026a1.295 1.295 0 00-.176-.082c-.108-.043-.255-.011-.442.094l-1.9 1.073a.398.398 0 00-.222.33c-.01.141.04.252.15.333l4.821 3.24-1.69 7.327c-.033.148.004.266.112.354.108.088.226.096.354.024l2.283-1.29z",
        "M169.032 78.666l-.306.124-.616-1.522a3.246 3.246 0 00-4.222-1.79 3.246 3.246 0 00-1.79 4.222l.618 1.521-.11.044c-.569.232-.844.88-.613 1.45l1.83 4.531c.231.57.882.845 1.452.615l6.424-2.6c.57-.23.845-.88.614-1.45l-1.831-4.531c-.23-.57-.88-.844-1.45-.614zm-5.209 2.108l-.617-1.521a2.051 2.051 0 011.13-2.667 2.05 2.05 0 012.665 1.13l.618 1.521-3.796 1.537z",
      ],
    ],
  ],
  G0 = new Map([
    [1, "success"],
    [2, "outSuccess"],
    [3, "success"],
    [4, "stone"],
    [5, "dark"],
    [6, "bonus"],
  ]);
let Z1 = class extends d0 {
  constructor() {
    var t;
    const a = (t = A0) == null ? void 0 : t.find((l) => l.gamePath === P1.key);
    super(P1, a),
      (this.config = P1),
      (this.gameValueDecoder = I1().decode(I.GameValue)),
      (this.betValueDecoder = I1().decode(I.BetValue)),
      (this.gameInfoDecoder = I1().decode(I.GameInfo));
  }
  play(a) {
    return v(this, null, function* () {
      const { currency: t, txId: l, scriptId: c } = a,
        n = new J(t.amount),
        i = this.betValue();
      return yield this.bet(
        s1(U({}, a), {
          currency: s1(U({}, t), { amount: n }),
          scriptId: c,
          txId: l,
          value: i,
        })
      );
    });
  }
  cashOut(a, t) {
    return v(this, null, function* () {
      const l = I1().encode(I.CollectRequest);
      return yield this.request(
        "collect",
        l({ frontgroundId: a, type: t })
      ).then(this.gameInfoDecoder);
    });
  }
  isWin(a) {
    return new J(a.winAmount).mul(a.betAmount).toNumber() > 0;
  }
  getResult(a) {
    const t = S0(a, this.oddsScale);
    return s1(U({}, t), { profit: t.profit });
  }
  bvMapper(a) {
    return a;
  }
  join() {
    return v(this, null, function* () {
      return yield this.request("join").then(this.gameInfoDecoder);
    });
  }
  guess(a, t) {
    return v(this, null, function* () {});
  }
  calcMaxProfit(a) {
    const {
      currency: { amount: t },
    } = a;
    return new J(t.toString()).mul(Math.max(1) - 1);
  }
  calcCurrentPayout(a) {
    return a.reduce((t, l, c) => t + this.config.layerPayouts[c][l], 0);
  }
  getBigWinPosition(a) {
    var c;
    const { position: t, index: l } = this.gameValueDecoder(a);
    return l ===
      ((c = this.config.layerPayouts[t - 1]) == null ? void 0 : c.length) - 1
      ? t
      : null;
  }
  betValue() {
    return new Uint8Array();
  }
};
Z1.alias = "Twist";
const C = u0(Z1),
  L1 = new v0(W0, C);
var j0 = z('<div class="grid grid-cols-2 gap-2 order-last lg:order-none">');
function T0(a) {
  return (
    (t = j0()),
    x(
      t,
      g(R1, {
        get onClick() {
          return a.onCashOutPart;
        },
        class: "col-span-1 bg-layer5 border-none rounded-md font-extrabold",
        get disabled() {
          return a.disabled;
        },
        get children() {
          return E("Cash Out Latest");
        },
      }),
      null
    ),
    x(
      t,
      g(R1, {
        get onClick() {
          return a.onCashOutAll;
        },
        get disabled() {
          return a.disabled;
        },
        class: "text-primary_brand col-span-1 font-extrabold rounded-md",
        style: {
          background: "linear-gradient(270deg, #FBD765 0%, #EF9E3F 100%)",
          "box-shadow":
            "0px 0px 12px 0px rgba(238, 206, 35, 0.30), 0px -2px 0px 0px #CA7A1D inset",
        },
        get children() {
          return E("Cash Out All");
        },
      }),
      null
    ),
    t
  );
  var t;
}
function V0() {
  return g(O0, {});
}
const F0 = "/modules/games2/assets/diamond_dark-1778f789.png",
  T1 = "/modules/games2/assets/diamond_green-6f4b3dbd.png",
  V1 = "/modules/games2/assets/diamond_orange-6726a76e.png",
  F1 = "/modules/games2/assets/diamond_purple-f027cbfe.png",
  _0 = "/modules/games2/assets/stone-9a615f41.png";
var W1 = z("<svg><path></svg>", !1, !0),
  N0 = z("<svg><mask><use fill=black></svg>", !1, !0),
  R0 = z("<svg><g class=svg-texts></svg>", !1, !0),
  $0 = z(
    '<div class="relative max-w-lg w-64 h-64 flex items-center justify-center sm:w-100 sm:h-100 sm:px-0 sm:mb-6 sm:mt-6"><div class="relative w-full h-full"><style></style><svg xmlns=http://www.w3.org/2000/svg viewBox="0 0 444 444"><defs><filter id=motionBlur x=0 y=0 width=100% height=100% color-interpolation-filters=sRGB><feGaussianBlur in=SourceGraphic stdDeviation=0,0 color-interpolation-filters=sRGB></feGaussianBlur></filter></defs><g fill=none fill-rule=nonzero><g transform="translate(6 6)"><circle cx=216 cy=216 r=216 class=bg-color stroke-width=12></circle><use class=roll-color href=#arc1></use><g mask=url(#arc-clip10)><use fill=#8032ff href=#arc1></use></g><path d="M235.5 22.5V38c37.1 4.1 70.9 19.5 97.7 42.8.2-.1.4-.2.6-.2l19.1-2.4c-30.8-30.7-71.8-51.1-117.4-55.7z"opacity=.22></path><use class=roll-color href=#arc2></use><g mask=url(#arc-clip11)><use fill=#8032ff href=#arc2></use></g><path d="M355.1 81.9l-18 2.3c33 30.4 54.6 72.9 57.5 120.5.1.1.2.1.3.2l15.4 11.9v-.9c0-52.1-20.6-99.5-54.2-134.5-.2.3-.6.5-1 .5z"opacity=.22></path><use class=roll-color href=#arc3></use><g mask=url(#arc-clip12)><use fill=#8032ff href=#arc3></use></g><path d="M409 220.8l-14.1-10.9c.1 2 .1 4 .1 6 0 45.4-17 86.8-44.9 118.4 0 .1.1.3.1.4l2.8 19c34.2-34.1 55.9-80.7 57.3-132.4-.5 0-1-.2-1.3-.5z"opacity=.22></path><use class=roll-color href=#arc4></use><g mask=url(#arc-clip13)><use fill=#8032ff href=#arc4></use></g><path d="M349.3 356l-2.6-17.8c-31 33.1-74.4 54.5-122.7 56.7 0 0 0 .1-.1.1L212 410.4h3.9c51.8 0 98.9-20.3 133.7-53.4-.2-.4-.3-.7-.3-1z"opacity=.22></path><use class=roll-color href=#arc5></use><g mask=url(#arc-clip14)><use fill=#8032ff href=#arc5></use></g><path d="M79.1 354c33.3 33 78.4 54 128.3 56.2 0-.4.2-.9.5-1.2l10.9-14h-2.9c-45.1 0-86.3-16.8-117.9-44.4L79.2 353l-.1 1z"opacity=.22></path><use class=roll-color href=#arc6></use><g mask=url(#arc-clip15)><use fill=#8032ff href=#arc6></use></g><path d="M76.2 349.9c.4-.4.9-.6 1.4-.7l16.6-2.1C61 316.3 39.5 273 37.1 224.8c-.1 0-.1-.1-.2-.1l-15.4-11.9v3.2c0 52.2 20.7 99.6 54.2 134.6.1-.3.3-.5.5-.7z"opacity=.22></path><use class=roll-color href=#arc7></use><g mask=url(#arc-clip16)><use fill=#8032ff href=#arc7></use></g><path d="M81.3 97.2l-2.4-19.1c-33.7 33.6-55.3 79.4-57.2 130.1.4 0 .9.2 1.2.5l14 10.9v-3.7c0-45.2 16.9-86.6 44.6-118.1-.1-.2-.1-.4-.2-.6z"opacity=.22></path><use class=roll-color href=#arc8></use><g mask=url(#arc-clip17)><use fill=#8032ff href=#arc8></use></g><path d="M195.5 38.1V22.6c-43.7 4.6-83.1 23.7-113.3 52.3.3.3.4.7.5 1.1L85 93.9c28.3-30.3 67.1-50.9 110.5-55.8z"opacity=.22></path><use class=roll-color href=#arc9></use><g mask=url(#arc-clip20)><use fill=#ff6526 href=#arc9></use></g><path d="M346.5 140.5c-24.3-42.2-66.1-68.1-111-74V82c35.8 5.3 69.3 24.9 91.2 56.2h.6l19.3 2.6c0-.1 0-.2-.1-.3z"opacity=.22></path><use class=roll-color href=#arc10></use><g mask=url(#arc-clip21)><use fill=#ff6526 href=#arc10></use></g><path d="M347.8 145c-.1 0-.2 0-.3-.1l-17.8-2.4c1.2 1.9 2.4 3.7 3.5 5.6 22.9 39.7 23.4 86.3 5.4 124.9.1.1.1.2.1.3l6.1 18.6 1.2-.1c25.6-44 28.3-99.7 2.8-147.3-.3.4-.6.5-1 .5z"opacity=.22></path><use class=roll-color href=#arc11></use><g mask=url(#arc-clip22)><use fill=#ff6526 href=#arc11></use></g><path d="M342.4 295.8c-.4-.3-.8-.7-.9-1.2l-5.4-16.3c-11.5 22.2-29.3 41.5-52.5 54.9-18.8 10.8-39.1 16.7-59.3 17.9l-11.9 15.4.1.2c1.2 0 2.5.1 3.6.1 25.5 0 51.4-6.5 75.2-20.2 22-12.7 39.6-30.2 52.2-50.4-.3 0-.7-.2-1.1-.4z"opacity=.22></path><use class=roll-color href=#arc12></use><g mask=url(#arc-clip23)><use fill=#ff6526 href=#arc12></use></g><path d="M207.9 366.4c0-.6.2-1 .5-1.5l10.6-13.7c-44.6.9-88.4-20.2-114.9-58.8h-.2L84.5 289l-.3.5c.3.6.7 1.1 1 1.7 26.5 45.9 73.5 72.6 122.7 75.2.1.1 0 0 0 0z"opacity=.22></path><use class=roll-color href=#arc13></use><g mask=url(#arc-clip24)><use fill=#ff6526 href=#arc13></use></g><path d="M82.5 285.1c.5-.3 1.1-.4 1.5-.3l17.2 2.9c-.9-1.3-1.7-2.8-2.5-4.2-22.5-38.9-23.4-84.3-6.5-122.5-.1-.2-.2-.3-.3-.5l-7.1-18.3h-.4c-24 43.1-26.4 96.7-2.3 143.1.1 0 .3-.1.4-.2z"opacity=.22></path><use class=roll-color href=#arc14></use><g mask=url(#arc-clip25)><use fill=#ff6526 href=#arc14></use></g><path d="M195.6 66.5c-18.8 2.6-37.6 8.8-55.1 18.9-22.9 13.2-41.2 31.7-53.9 53.1.1 0 .3.1.3.2.5.3.8.7 1 1.1l6.4 16.5c11.5-23.4 29.7-43.6 53.8-57.5 15.1-8.7 31.1-14.1 47.3-16.6l.2-15.7z"opacity=.22></path><use class=roll-color href=#arc15></use><g mask=url(#arc-clip00)><use fill=#00c544 href=#arc15></use></g><path d="M235.5 109.3v16.5c38.1 8.3 67.6 40.2 72.1 79.6.2.1.3.2.4.3l15.5 12 .8-.6v-1.2c0-53.1-38.3-97.3-88.8-106.6z"opacity=.22></path><use class=roll-color href=#arc16></use><g mask=url(#arc-clip01)><use fill=#00c544 href=#arc16></use></g><path d="M323.5 222.1c-.6 0-1.1-.2-1.5-.5l-14-10.9c.1 1.7.1 3.5.1 5.2 0 48.1-37.1 87.8-84.2 91.9 0 .1-.1.1-.1.2l-12 15.6.5.7c1.2 0 2.3.1 3.5.1 57.7 0 105.1-45.4 108.2-102.3h-.5z"opacity=.22></path><use class=roll-color href=#arc17></use><g mask=url(#arc-clip02)><use fill=#00c544 href=#arc17></use></g><path d="M207.4 323.6c0-.6.2-1.1.5-1.5l10.8-13.9h-2.8c-48.2 0-87.8-37.1-91.9-84.2-.1 0-.1-.1-.2-.1l-15.5-12-.7.6c0 1.2-.1 2.3-.1 3.5 0 56.9 44.1 103.8 100 108.1 0-.2-.1-.4-.1-.5z"opacity=.22></path><use class=roll-color href=#arc18></use><g mask=url(#arc-clip03)><use fill=#00c544 href=#arc18></use></g><path d="M195.5 125.9v-16.5c-47.4 9-83.9 49.1-87.7 98.1.7-.1 1.4 0 2 .4l13.9 10.8v-2.8c-.1-43.8 30.7-80.7 71.8-90z"opacity=.22></path><g transform="translate(12.65, 3.76)"><image x=187 y=3 width=32 height=32></image></g><g transform="translate(15.95, 6.76)"><image x=184 y=43 width=32 height=32></image></g><g transform="translate(16.95, 7.12)"><image x=183 y=87 width=32 height=32></image></g></g><g><rect id=rectG0 fill=transparent height=39 width=133></rect><rect id=rectG1 fill=transparent height=35 width=130></rect><rect id=rectG2 fill=transparent height=40 width=127>'
  );
const q0 = (a) => {
    const [t, l] = w(!1);
    let c;
    const n = A(() => {
        const r = a.dataFilled ? 0 : a.data.circle.strokeDashoffset,
          m = t() ? 0 : a.data.circle.strokeDashoffset;
        return a.lastOne ? m : r;
      }),
      i = A(() => {
        const r = a.orangeBigWin && a.lastOne && a.position === 2;
        return {
          isLastGreen: a.greenBigWin && a.lastOne && a.position === 0,
          isLastOrange: r,
          isLastPurple: a.purpleBigWin && a.lastOne && a.position === 1,
        };
      });
    return (
      V(() => {
        l(i().isLastGreen || i().isLastOrange || i().isLastPurple);
      }),
      V(() => {
        a.canAnimate &&
          c &&
          D1(
            c,
            { strokeDashoffset: n() },
            { duration: 1, persist: !0 }
          ).finished.then(() => {
            var r;
            a.onAnimateComplete &&
              (i().isLastGreen || i().isLastOrange || i().isLastPurple) &&
              (l(!1),
              (r = a.onAnimateComplete) == null || r.call(a, a.position));
          });
      }),
      [
        ((p = W1()),
        L(
          (r) => {
            var m = a.data.id,
              o = a.data.path;
            return (
              m !== r.e && s(p, "id", (r.e = m)),
              o !== r.t && s(p, "d", (r.t = o)),
              r
            );
          },
          { e: void 0, t: void 0 }
        ),
        p),
        ((u = N0()),
        (f = u.firstChild),
        x(
          u,
          g(
            j1.circle,
            U1(() => a.data.circle, {
              get "stroke-width"() {
                return a.data.circle.strokeWidth;
              },
              get "stroke-dashoffset"() {
                return a.data.circle.strokeDashoffset;
              },
              get "stroke-dasharray"() {
                return a.data.circle.strokeDasharray;
              },
              ref: (r) => (c = r),
            })
          ),
          null
        ),
        L(
          (r) => {
            var m = `arc-clip${a.opt}`,
              o = `#${a.data.id}`;
            return (
              m !== r.e && s(u, "id", (r.e = m)),
              o !== r.t && s(f, "href", (r.t = o)),
              r
            );
          },
          { e: void 0, t: void 0 }
        ),
        u),
      ]
    );
    var u, f, p;
  },
  K0 = ["#24EE89", "#8F4BFF", "#FF8229"],
  U0 = (a) => {
    const t = A(() => a.innerLayers[a.index] === a.data.length - 1);
    return (
      (l = R0()),
      x(
        l,
        g(X, {
          get each() {
            return a.data;
          },
          children: (c, n) => {
            const i = A(() =>
                n() < a.innerLayers[a.index]
                  ? "#ffffff"
                  : h.darken
                  ? "#000"
                  : "#627E8F"
              ),
              u = A(() => (t() && !a.bigWins[a.index] ? K0[a.index] : i()));
            return Array.isArray(c)
              ? c.map((p) => {
                  return (
                    (r = W1()), s(r, "d", p), L(() => s(r, "fill", u())), r
                  );
                  var r;
                })
              : ((f = W1()), s(f, "d", c), L(() => s(f, "fill", i())), f);
            var f;
          },
        })
      ),
      l
    );
    var l;
  },
  H0 = (a) => {
    const [t, l] = w(!1),
      [c, n] = w(!1),
      [i, u] = w(!1),
      f = (r) => {
        var o, b;
        (b = (o = [[() => l(!1)], [() => n(!1)], [() => u(!1)]][r])[0]) ==
          null || b.call(o);
      };
    V(() => {
      var r;
      if (a.result) {
        const m = C.getBigWinPosition(a.result.gameValue),
          o = [
            () =>
              v(void 0, null, function* () {
                l(!0), yield A1(1e3), a.playSound("bonus");
              }),
            () =>
              v(void 0, null, function* () {
                n(!0), yield A1(1e3), a.playSound("bonus");
              }),
            () =>
              v(void 0, null, function* () {
                u(!0), yield A1(1e3), a.playSound("bonus");
              }),
          ];
        m && ((r = o[m - 1]) == null || r.call(o));
      }
    });
    const p = A(() => [t(), c(), i()]);
    return (() => {
      var r = $0(),
        m = r.firstChild.firstChild,
        o = m.nextSibling.firstChild;
      o.firstChild;
      var b = o.nextSibling,
        D = b.firstChild,
        F = D.firstChild.nextSibling.nextSibling.nextSibling,
        Y = F.nextSibling.nextSibling.nextSibling,
        Q = Y.nextSibling.nextSibling.nextSibling,
        O = Q.nextSibling.nextSibling.nextSibling,
        _ = O.nextSibling.nextSibling.nextSibling,
        Z = _.nextSibling.nextSibling.nextSibling,
        W = Z.nextSibling.nextSibling.nextSibling,
        P = W.nextSibling.nextSibling.nextSibling,
        a1 = P.nextSibling.nextSibling.nextSibling,
        N = a1.nextSibling.nextSibling.nextSibling,
        G = N.nextSibling.nextSibling.nextSibling,
        t1 = G.nextSibling.nextSibling.nextSibling,
        j = t1.nextSibling.nextSibling.nextSibling,
        R = j.nextSibling.nextSibling.nextSibling,
        T = R.nextSibling.nextSibling.nextSibling,
        l1 = T.nextSibling.nextSibling.nextSibling,
        e1 = l1.nextSibling.nextSibling.nextSibling,
        r1 = e1.nextSibling.nextSibling.nextSibling,
        M = r1.nextSibling,
        u1 = M.firstChild,
        $ = M.nextSibling,
        c1 = $.firstChild,
        d1 = $.nextSibling.firstChild,
        f1 = D.nextSibling;
      return (
        x(m, () =>
          h.darken
            ? `
  .roll-color {
    fill: #3A4142;
  }
  
  .bg-color {
    fill: #1E2121;
    stroke: #1E2121;
    opacity: 0.75;
  }

  .svg-texts {
    pointer-events: none;
    fill: #000;
    path {
      fill-opacity: 1;
    }
  }
`
            : `
 .roll-color {
    fill: #fff;
  }
  
  .bg-color {
    fill: #BAC4C4;
    stroke: #BAC4C4;
    opacity: 0.5;
  }

  .svg-texts {
    pointer-events: none;
    fill: #627E8F;
    path {
      fill-opacity: 0.6;
    }
  }
`
        ),
        x(
          o,
          g(X, {
            each: X1,
            children: (e, d) =>
              e.map((y, k) =>
                g(q0, {
                  data: y,
                  get opt() {
                    return `${d()}${k}`;
                  },
                  get position() {
                    return d();
                  },
                  get dataFilled() {
                    return a.layers[d()] > k;
                  },
                  get lastOne() {
                    return e.length === k + 1;
                  },
                  get orangeBigWin() {
                    return i();
                  },
                  get greenBigWin() {
                    return t();
                  },
                  get purpleBigWin() {
                    return c();
                  },
                  get canAnimate() {
                    return a.canAnimate;
                  },
                  onAnimateComplete: f,
                })
              ),
          }),
          null
        ),
        x(
          b,
          g(X, {
            each: Q1,
            children: (e, d) =>
              g(U0, {
                data: e,
                get index() {
                  return d();
                },
                get key() {
                  return d();
                },
                get bigWins() {
                  return p();
                },
                get innerLayers() {
                  return a.layers;
                },
              }),
          }),
          f1
        ),
        L(
          (e) => {
            var d = h.darken ? "#000" : "#6B8EA1",
              y = h.darken ? "#000" : "#6B8EA1",
              k = h.darken ? "#000" : "#6B8EA1",
              S = h.darken ? "#000" : "#6B8EA1",
              q = h.darken ? "#000" : "#6B8EA1",
              K = h.darken ? "#000" : "#6B8EA1",
              B = h.darken ? "#000" : "#6B8EA1",
              n1 = h.darken ? "#000" : "#6B8EA1",
              i1 = h.darken ? "#000" : "#6B8EA1",
              h1 = h.darken ? "#000" : "#6B8EA1",
              g1 = h.darken ? "#000" : "#6B8EA1",
              m1 = h.darken ? "#000" : "#6B8EA1",
              p1 = h.darken ? "#000" : "#6B8EA1",
              x1 = h.darken ? "#000" : "#6B8EA1",
              b1 = h.darken ? "#000" : "#6B8EA1",
              y1 = h.darken ? "#000" : "#6B8EA1",
              k1 = h.darken ? "#000" : "#6B8EA1",
              z1 = h.darken ? "#000" : "#6B8EA1",
              v1 = F1,
              S1 = V1,
              w1 = T1;
            return (
              d !== e.e && s(F, "fill", (e.e = d)),
              y !== e.t && s(Y, "fill", (e.t = y)),
              k !== e.a && s(Q, "fill", (e.a = k)),
              S !== e.o && s(O, "fill", (e.o = S)),
              q !== e.i && s(_, "fill", (e.i = q)),
              K !== e.n && s(Z, "fill", (e.n = K)),
              B !== e.s && s(W, "fill", (e.s = B)),
              n1 !== e.h && s(P, "fill", (e.h = n1)),
              i1 !== e.r && s(a1, "fill", (e.r = i1)),
              h1 !== e.d && s(N, "fill", (e.d = h1)),
              g1 !== e.l && s(G, "fill", (e.l = g1)),
              m1 !== e.u && s(t1, "fill", (e.u = m1)),
              p1 !== e.c && s(j, "fill", (e.c = p1)),
              x1 !== e.w && s(R, "fill", (e.w = x1)),
              b1 !== e.m && s(T, "fill", (e.m = b1)),
              y1 !== e.f && s(l1, "fill", (e.f = y1)),
              k1 !== e.y && s(e1, "fill", (e.y = k1)),
              z1 !== e.g && s(r1, "fill", (e.g = z1)),
              v1 !== e.p && s(u1, "href", (e.p = v1)),
              S1 !== e.b && s(c1, "href", (e.b = S1)),
              w1 !== e.T && s(d1, "href", (e.T = w1)),
              e
            );
          },
          {
            e: void 0,
            t: void 0,
            a: void 0,
            o: void 0,
            i: void 0,
            n: void 0,
            s: void 0,
            h: void 0,
            r: void 0,
            d: void 0,
            l: void 0,
            u: void 0,
            c: void 0,
            w: void 0,
            m: void 0,
            f: void 0,
            y: void 0,
            g: void 0,
            p: void 0,
            b: void 0,
            T: void 0,
          }
        ),
        r
      );
    })();
  };
var J0 = z(
    '<div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 overflow-hidden rounded-full pointer-events-none w-20 h-20 sm:w-36 sm:h-36 bg-[#939da4] dark:bg-layer1 ">'
  ),
  X0 = z(
    '<div class="w-20 h-20 sm:w-36 sm:h-36 flex items-center justify-center"><img class="w-14 h-14 sm:w-[6.25rem] sm:h-[6.25rem]">'
  );
const M1 = [T1, F1, V1, _0, F0],
  K1 = [...M1, ...M1, ...M1],
  Y0 = (a) => {
    let t;
    return (
      V(() => {
        if (!a.result || !t) return;
        const c = c0.mobile
            ? 5 *
              parseFloat(getComputedStyle(document.documentElement).fontSize)
            : 144,
          n = c * M1.length,
          { position: i } = C.gameValueDecoder(a.result.gameValue),
          u = i - 1,
          f = -u * c,
          p = t.style.transform;
        let r = 0,
          m = 0;
        if (typeof p == "string") {
          const b = p.match(/\d+/);
          (r = b ? -Number(b[0]) : 0), (m = Math.abs(r / c));
        }
        let o = r - c * M1.length + (m - u) * c;
        Math.abs(r - o) <= n && (o -= n),
          n0(() => {
            (() =>
              v(void 0, null, function* () {
                t &&
                  (yield D1(
                    t,
                    { y: o, filter: "blur(2px)" },
                    { duration: a.isTurboEnable ? 0 : 0.8 }
                  ).finished,
                  yield D1(t, { y: f, filter: "none" }, { duration: 0 })
                    .finished);
              }))().finally(() => {
              var D;
              const b = G0.get(i);
              b && a.playSound(b),
                (D = a.onAnimateComplete) == null || D.call(a, a.result);
            });
          });
      }),
      (l = J0()),
      x(
        l,
        g(j1.div, {
          ref: (c) => (t = c),
          get style() {
            return { height: 100 * K1.length + "%" };
          },
          class: "-translate-y-20	sm:-translate-y-36",
          get children() {
            return g(X, {
              each: K1,
              children: (c) => {
                return (n = X0()), (i = n.firstChild), s(i, "src", c), n;
                var n, i;
              },
            });
          },
        })
      ),
      l
    );
    var l;
  };
var Q0 = z(
    '<div class="relative flex items-center justify-center w-full mb-2 mt-4">'
  ),
  Z0 = z(
    '<div class="flex mb-4"><div class="rounded-lg px-5 py-1 mt-1 bg-layer6 max-w-max mx-auto flex items-center font-normal text-sm"><span class="mr-1 text-secondary"></span><span class="flex items-center text-alw_white"><span class=text-primary></span><span class="text-brand ml-0.5">'
  );
const a2 = (a) => {
  const { playSound: t } = H1(L1),
    { activeToken: l } = J1(),
    { coinFormat: c } = P0(),
    n = A(() => c(new J(a.totalProfit), l().symbol));
  return [
    ((r = Q0()),
    x(
      r,
      g(H0, {
        get layers() {
          return a.layers;
        },
        get canAnimate() {
          return a.isGemAnimationComplete;
        },
        get result() {
          return a.latestResult;
        },
        playSound: t,
        get isTurboEnable() {
          return a.isTurboEnable;
        },
      }),
      null
    ),
    x(
      r,
      g(Y0, {
        get result() {
          return a.latestResult;
        },
        get onAnimateComplete() {
          return a.onGemAnimationComplete;
        },
        playSound: t,
        get isTurboEnable() {
          return a.isTurboEnable;
        },
      }),
      null
    ),
    r),
    ((i = Z0()),
    (u = i.firstChild.firstChild),
    (f = u.nextSibling.firstChild),
    (p = f.nextSibling),
    x(u, () => E("Total profit")),
    x(f, n),
    x(p, () => `(${a.totalPayout}x)`),
    i),
  ];
  var i, u, f, p, r;
};
var t2 = z('<h2 class="font-semibold pt-4 pb-2">'),
  l2 = z("<div class=help-content><p>"),
  e2 = z(
    '<div class="text-secondary p-2"><h2 class="font-semibold pt-4 pb-2"></h2><div>'
  ),
  r2 = z("<p>");
const c2 = () => {
  const a = M0();
  return (
    (t = e2()),
    (l = t.firstChild),
    (c = l.nextSibling),
    x(l, () => {
      var n;
      return E("What Is __gamename__?", {
        gamename: (n = a()) == null ? void 0 : n.fullName,
      });
    }),
    x(
      c,
      g(X, {
        get each() {
          var n;
          return (n = a()) == null
            ? void 0
            : n.details.split(`
`);
        },
        children: (n) => {
          return (i = r2()), x(i, n), i;
          var i;
        },
      })
    ),
    x(
      t,
      g(i0, {
        get when() {
          var n;
          return (
            O1(() => {
              var i;
              return !!((i = a()) != null && i.slotsInfo);
            })() && ((n = a()) == null ? void 0 : n.slotsInfo.rtpDes)
          );
        },
        get children() {
          return [
            ((u = t2()),
            x(u, () => {
              var f;
              return E("What is the __gamename__ return rate?", {
                gamename: (f = a()) == null ? void 0 : f.fullName,
              });
            }),
            u),
            ((n = l2()),
            (i = n.firstChild),
            x(i, () => {
              var f;
              return E("RTP (Return to Player) is __rtp__%.", {
                rtp: (f = a()) == null ? void 0 : f.slotsInfo.rtpDes,
              });
            }),
            n),
          ];
          var n, i, u;
        },
      }),
      null
    ),
    t
  );
  var t, l, c;
};
function n2() {
  const a = [
      { title: E("What Game Is This?"), node: () => g(c2, {}) },
      { title: E("Fairness"), node: () => g(L0, { htmlName: "twist" }) },
      { title: E("Max Profits"), node: () => g(m0, {}) },
    ],
    { user: t } = h0(),
    { addLog: l } = f0(),
    { resolveDeduction: c } = B0(),
    { findToken: n, setActiveToken: i, setIsfrozen: u, resetToken: f } = J1(),
    { mute: p, toggleMute: r, playSound: m } = H1(L1),
    [o, b] = w(o1.pending),
    [D, F] = w([0, 0, 0]),
    [Y, Q] = w(!0),
    [O, _] = w(0),
    [Z, W] = w(!1),
    [P, a1] = w(0),
    [N, G] = w(0),
    {
      play: t1,
      betAmount: j,
      setBetAmount: R,
      isTurboEnable: T,
      setLatestProfit: l1,
      latestProfit: e1,
      toggleEnableTurbo: r1,
      betResult: M,
      setBetResult: u1,
      betCurrency: $,
    } = E0(L1, () => {
      u(!0);
    }),
    c1 = A(() => ({
      text: E("Bet"),
      disabled:
        [o1.guessing, o1.cashouting].some((d) => o() === d) || !j() || Z(),
      play: () =>
        v(this, null, function* () {
          const d = yield ((y) =>
            v(this, null, function* () {
              try {
                W(!0);
                const k = yield t1(y);
                if (k) {
                  const S = C.toISingleLog(k, t, { txId: k.txId, bv: null });
                  return (
                    u1(S),
                    A1(T() ? 0 : 800).finally(() => {
                      l(S), W(!1);
                    }),
                    S
                  );
                }
                return W(!1), null;
              } catch (k) {
                return null;
              }
            }))({
            currency: s1(U({}, $()), {
              amount: N() ? new J(N()).toNumber() : $().amount,
            }),
            scriptId: 0,
            params: null,
          });
          d ? u1(d) : f(), G(0);
        }),
    })),
    d1 = (d) =>
      v(this, null, function* () {
        const y = [d.leftIndex, d.centerIndex, d.rightIndex];
        R(new J(d.betAmount).toNumber()),
          b(d.cashpotPayout === 0 ? o1.end : o1.playing),
          F(y),
          yield A1(1e3),
          _(C.calcCurrentPayout(y));
      }),
    f1 = (d) =>
      v(this, null, function* () {
        var k, S, q, K;
        const y = (S = (k = M()) == null ? void 0 : k.txId) != null ? S : 0;
        b(o1.cashouting), G(0);
        try {
          const B = yield C.cashOut(y, d),
            n1 = O() - B.cashpotPayout,
            i1 = M()
              ? C.toISingleLog(
                  s1(U({}, M()), { betValue: new Uint8Array() }),
                  t,
                  { txId: y, bv: null }
                )
              : null;
          return (
            m("bonus"),
            d1(B).then(() => {
              B.cashpotPayout === 0 && f();
            }),
            (q = M()) != null &&
              q.txId &&
              c(Number((K = M()) == null ? void 0 : K.txId)),
            l1({
              odds: n1,
              currency: { symbol: B.currencyName, amount: B.settleAmount },
              duration: 3e3,
            }),
            i1
          );
        } catch (B) {
          return b(o1.playing), null;
        }
      }),
    e = (d) => {
      const y = C.gameValueDecoder(d.gameValue),
        k = [y.leftIndex, y.centerIndex, y.rightIndex],
        S = C.calcCurrentPayout(k);
      _(S), F(k), Q(!0), u(S !== 0);
    };
  return (
    V(() => {
      s0.login &&
        v(this, null, function* () {
          u(!0);
          try {
            const d = yield C.join();
            if (d.cashpotPayout > 0 && d.status === Y1.normal) {
              d1(d);
              const y = n(d.currencyName);
              y && (i(y), G(new J(d.betAmount).toNumber()));
            } else u(!1);
          } catch (d) {
            u(!1);
          }
        });
    }),
    V(() => {
      a1(O() ? new J(O()).mul(j()).toNumber() : 0);
    }),
    g(p0, {
      get action() {
        return g(x0, {
          get mute() {
            return p();
          },
          get isTurboEnable() {
            return T();
          },
          hotKeyList: {},
          helpList: a,
          onMuteChange: r,
          onTurboChange: r1,
          actions: ["mute", "turbo", "hotKeys", "seedSetting", "liveStats"],
        });
      },
      get children() {
        return [
          g(b0, {
            get modes() {
              return [$1.manual];
            },
            class: "pb-2",
            get children() {
              return g(I0, {
                get value() {
                  return $1.manual;
                },
                get children() {
                  return [
                    g(g0, {
                      get value() {
                        return j();
                      },
                      onChange: R,
                      get disabled() {
                        return O() !== 0;
                      },
                    }),
                    g(D0, {
                      get winAmount() {
                        return P();
                      },
                    }),
                    O1(
                      () =>
                        O1(() => P() !== 0)() &&
                        g(T0, {
                          onCashOutPart: () => f1(E1.partial),
                          onCashOutAll: () => f1(E1.all),
                          get disabled() {
                            return P() === 0;
                          },
                        })
                    ),
                    g(z0, {
                      get play() {
                        return c1().play;
                      },
                      get text() {
                        return c1().text;
                      },
                      get disabled() {
                        return c1().disabled;
                      },
                    }),
                  ];
                },
              });
            },
          }),
          g(y0, {
            get profit() {
              return U({}, e1());
            },
            get children() {
              return [
                g(C0, {}),
                g(k0, {
                  class: "flex flex-col ",
                  get children() {
                    return g(a2, {
                      get layers() {
                        return D();
                      },
                      get latestResult() {
                        return M();
                      },
                      get isTurboEnable() {
                        return T();
                      },
                      get totalPayout() {
                        return O();
                      },
                      get totalProfit() {
                        return P();
                      },
                      get isGemAnimationComplete() {
                        return Y();
                      },
                      onGemAnimationComplete: e,
                    });
                  },
                }),
              ];
            },
          }),
        ];
      },
    })
  );
}
var G1 = z("<svg><path></svg>", !1, !0),
  i2 = z("<svg><mask><use fill=black></svg>", !1, !0),
  s2 = z("<svg><g class=svg-texts></svg>", !1, !0),
  o2 = z(
    '<div class="relative max-w-lg w-64 h-64 flex items-center justify-center sm:w-100 sm:h-100 sm:px-0 sm:mb-6 sm:mt-6"><div class="relative w-full h-full"><style></style><svg xmlns=http://www.w3.org/2000/svg viewBox="0 0 444 444"><defs><filter id=motionBlur x=0 y=0 width=100% height=100% color-interpolation-filters=sRGB><feGaussianBlur in=SourceGraphic stdDeviation=0,0 color-interpolation-filters=sRGB></feGaussianBlur></filter></defs><g fill=none fill-rule=nonzero><g transform="translate(6 6)"><circle cx=216 cy=216 r=216 class=bg-color stroke-width=12></circle><use class=roll-color href=#arc1-x></use><g mask=url(#arc-clip10-x)><use fill=#8032ff href=#arc1-x></use></g><path d="M235.5 22.5V38c37.1 4.1 70.9 19.5 97.7 42.8.2-.1.4-.2.6-.2l19.1-2.4c-30.8-30.7-71.8-51.1-117.4-55.7z"opacity=.22></path><use class=roll-color href=#arc2-x></use><g mask=url(#arc-clip11-x)><use fill=#8032ff href=#arc2-x></use></g><path d="M355.1 81.9l-18 2.3c33 30.4 54.6 72.9 57.5 120.5.1.1.2.1.3.2l15.4 11.9v-.9c0-52.1-20.6-99.5-54.2-134.5-.2.3-.6.5-1 .5z"opacity=.22></path><use class=roll-color href=#arc3-x></use><g mask=url(#arc-clip12-x)><use fill=#8032ff href=#arc3-x></use></g><path d="M409 220.8l-14.1-10.9c.1 2 .1 4 .1 6 0 45.4-17 86.8-44.9 118.4 0 .1.1.3.1.4l2.8 19c34.2-34.1 55.9-80.7 57.3-132.4-.5 0-1-.2-1.3-.5z"opacity=.22></path><use class=roll-color href=#arc4-x></use><g mask=url(#arc-clip13-x)><use fill=#8032ff href=#arc4-x></use></g><path d="M349.3 356l-2.6-17.8c-31 33.1-74.4 54.5-122.7 56.7 0 0 0 .1-.1.1L212 410.4h3.9c51.8 0 98.9-20.3 133.7-53.4-.2-.4-.3-.7-.3-1z"opacity=.22></path><use class=roll-color href=#arc5-x></use><g mask=url(#arc-clip14-x)><use fill=#8032ff href=#arc5-x></use></g><path d="M79.1 354c33.3 33 78.4 54 128.3 56.2 0-.4.2-.9.5-1.2l10.9-14h-2.9c-45.1 0-86.3-16.8-117.9-44.4L79.2 353l-.1 1z"opacity=.22></path><use class=roll-color href=#arc6-x></use><g mask=url(#arc-clip15-x)><use fill=#8032ff href=#arc6-x></use></g><path d="M76.2 349.9c.4-.4.9-.6 1.4-.7l16.6-2.1C61 316.3 39.5 273 37.1 224.8c-.1 0-.1-.1-.2-.1l-15.4-11.9v3.2c0 52.2 20.7 99.6 54.2 134.6.1-.3.3-.5.5-.7z"opacity=.22></path><use class=roll-color href=#arc7-x></use><g mask=url(#arc-clip16-x)><use fill=#8032ff href=#arc7-x></use></g><path d="M81.3 97.2l-2.4-19.1c-33.7 33.6-55.3 79.4-57.2 130.1.4 0 .9.2 1.2.5l14 10.9v-3.7c0-45.2 16.9-86.6 44.6-118.1-.1-.2-.1-.4-.2-.6z"opacity=.22></path><use class=roll-color href=#arc8-x></use><g mask=url(#arc-clip17-x)><use fill=#8032ff href=#arc8-x></use></g><path d="M195.5 38.1V22.6c-43.7 4.6-83.1 23.7-113.3 52.3.3.3.4.7.5 1.1L85 93.9c28.3-30.3 67.1-50.9 110.5-55.8z"opacity=.22></path><use class=roll-color href=#arc9-x></use><g mask=url(#arc-clip20-x)><use fill=#ff6526 href=#arc9-x></use></g><path d="M346.5 140.5c-24.3-42.2-66.1-68.1-111-74V82c35.8 5.3 69.3 24.9 91.2 56.2h.6l19.3 2.6c0-.1 0-.2-.1-.3z"opacity=.22></path><use class=roll-color href=#arc10-x></use><g mask=url(#arc-clip21-x)><use fill=#ff6526 href=#arc10-x></use></g><path d="M347.8 145c-.1 0-.2 0-.3-.1l-17.8-2.4c1.2 1.9 2.4 3.7 3.5 5.6 22.9 39.7 23.4 86.3 5.4 124.9.1.1.1.2.1.3l6.1 18.6 1.2-.1c25.6-44 28.3-99.7 2.8-147.3-.3.4-.6.5-1 .5z"opacity=.22></path><use class=roll-color href=#arc11-x></use><g mask=url(#arc-clip22-x)><use fill=#ff6526 href=#arc11-x></use></g><path d="M342.4 295.8c-.4-.3-.8-.7-.9-1.2l-5.4-16.3c-11.5 22.2-29.3 41.5-52.5 54.9-18.8 10.8-39.1 16.7-59.3 17.9l-11.9 15.4.1.2c1.2 0 2.5.1 3.6.1 25.5 0 51.4-6.5 75.2-20.2 22-12.7 39.6-30.2 52.2-50.4-.3 0-.7-.2-1.1-.4z"opacity=.22></path><use class=roll-color href=#arc12-x></use><g mask=url(#arc-clip23-x)><use fill=#ff6526 href=#arc12-x></use></g><path d="M207.9 366.4c0-.6.2-1 .5-1.5l10.6-13.7c-44.6.9-88.4-20.2-114.9-58.8h-.2L84.5 289l-.3.5c.3.6.7 1.1 1 1.7 26.5 45.9 73.5 72.6 122.7 75.2.1.1 0 0 0 0z"opacity=.22></path><use class=roll-color href=#arc13-x></use><g mask=url(#arc-clip24-x)><use fill=#ff6526 href=#arc13-x></use></g><path d="M82.5 285.1c.5-.3 1.1-.4 1.5-.3l17.2 2.9c-.9-1.3-1.7-2.8-2.5-4.2-22.5-38.9-23.4-84.3-6.5-122.5-.1-.2-.2-.3-.3-.5l-7.1-18.3h-.4c-24 43.1-26.4 96.7-2.3 143.1.1 0 .3-.1.4-.2z"opacity=.22></path><use class=roll-color href=#arc14-x></use><g mask=url(#arc-clip25-x)><use fill=#ff6526 href=#arc14-x></use></g><path d="M195.6 66.5c-18.8 2.6-37.6 8.8-55.1 18.9-22.9 13.2-41.2 31.7-53.9 53.1.1 0 .3.1.3.2.5.3.8.7 1 1.1l6.4 16.5c11.5-23.4 29.7-43.6 53.8-57.5 15.1-8.7 31.1-14.1 47.3-16.6l.2-15.7z"opacity=.22></path><use class=roll-color href=#arc15-x></use><g mask=url(#arc-clip00-x)><use fill=#00c544 href=#arc15-x></use></g><path d="M235.5 109.3v16.5c38.1 8.3 67.6 40.2 72.1 79.6.2.1.3.2.4.3l15.5 12 .8-.6v-1.2c0-53.1-38.3-97.3-88.8-106.6z"opacity=.22></path><use class=roll-color href=#arc16-x></use><g mask=url(#arc-clip01-x)><use fill=#00c544 href=#arc16-x></use></g><path d="M323.5 222.1c-.6 0-1.1-.2-1.5-.5l-14-10.9c.1 1.7.1 3.5.1 5.2 0 48.1-37.1 87.8-84.2 91.9 0 .1-.1.1-.1.2l-12 15.6.5.7c1.2 0 2.3.1 3.5.1 57.7 0 105.1-45.4 108.2-102.3h-.5z"opacity=.22></path><use class=roll-color href=#arc17-x></use><g mask=url(#arc-clip02-x)><use fill=#00c544 href=#arc17-x></use></g><path d="M207.4 323.6c0-.6.2-1.1.5-1.5l10.8-13.9h-2.8c-48.2 0-87.8-37.1-91.9-84.2-.1 0-.1-.1-.2-.1l-15.5-12-.7.6c0 1.2-.1 2.3-.1 3.5 0 56.9 44.1 103.8 100 108.1 0-.2-.1-.4-.1-.5z"opacity=.22></path><use class=roll-color href=#arc18-x></use><g mask=url(#arc-clip03-x)><use fill=#00c544 href=#arc18-x></use></g><path d="M195.5 125.9v-16.5c-47.4 9-83.9 49.1-87.7 98.1.7-.1 1.4 0 2 .4l13.9 10.8v-2.8c-.1-43.8 30.7-80.7 71.8-90z"opacity=.22></path><g transform="translate(12.65, 3.76)"><image x=187 y=3 width=32 height=32></image></g><g transform="translate(15.95, 6.76)"><image x=184 y=43 width=32 height=32></image></g><g transform="translate(16.95, 7.12)"><image x=183 y=87 width=32 height=32></image></g></g><g><rect id=rectG0 fill=transparent height=39 width=133></rect><rect id=rectG1 fill=transparent height=35 width=130></rect><rect id=rectG2 fill=transparent height=40 width=127>'
  );
const u2 = (a) => {
    const [t, l] = w(!1);
    let c;
    const n = A(() => {
        const r = a.dataFilled ? 0 : a.data.circle.strokeDashoffset,
          m = t() ? 0 : a.data.circle.strokeDashoffset;
        return a.lastOne ? m : r;
      }),
      i = A(() => {
        const r = a.orangeBigWin && a.lastOne && a.position === 2;
        return {
          isLastGreen: a.greenBigWin && a.lastOne && a.position === 0,
          isLastOrange: r,
          isLastPurple: a.purpleBigWin && a.lastOne && a.position === 1,
        };
      });
    return (
      V(() => {
        l(i().isLastGreen || i().isLastOrange || i().isLastPurple);
      }),
      V(() => {
        a.canAnimate &&
          c &&
          D1(
            c,
            { strokeDashoffset: n() },
            { duration: 0, persist: !0 }
          ).finished.then(() => {
            var r;
            a.onAnimateComplete &&
              (i().isLastGreen || i().isLastOrange || i().isLastPurple) &&
              (l(!1),
              (r = a.onAnimateComplete) == null || r.call(a, a.position));
          });
      }),
      [
        ((p = G1()),
        L(
          (r) => {
            var m = `${a.data.id}-x`,
              o = a.data.path;
            return (
              m !== r.e && s(p, "id", (r.e = m)),
              o !== r.t && s(p, "d", (r.t = o)),
              r
            );
          },
          { e: void 0, t: void 0 }
        ),
        p),
        ((u = i2()),
        (f = u.firstChild),
        x(
          u,
          g(
            j1.circle,
            U1(() => a.data.circle, {
              get "stroke-width"() {
                return a.data.circle.strokeWidth;
              },
              get "stroke-dashoffset"() {
                return a.data.circle.strokeDashoffset;
              },
              get "stroke-dasharray"() {
                return a.data.circle.strokeDasharray;
              },
              ref: (r) => (c = r),
            })
          ),
          null
        ),
        L(
          (r) => {
            var m = `arc-clip${a.opt}-x`,
              o = `#${a.data.id}-x`;
            return (
              m !== r.e && s(u, "id", (r.e = m)),
              o !== r.t && s(f, "href", (r.t = o)),
              r
            );
          },
          { e: void 0, t: void 0 }
        ),
        u),
      ]
    );
    var u, f, p;
  },
  d2 = ["#24EE89", "#8F4BFF", "#FF8229"],
  f2 = (a) => {
    const t = A(() => a.innerLayers[a.index] === a.data.length - 1);
    return (
      (l = s2()),
      x(
        l,
        g(X, {
          get each() {
            return a.data;
          },
          children: (c, n) => {
            const i = A(() =>
                n() < a.innerLayers[a.index]
                  ? "#ffffff"
                  : h.darken
                  ? "#000"
                  : "#627E8F"
              ),
              u = A(() => (t() && !a.bigWins[a.index] ? d2[a.index] : i()));
            return Array.isArray(c)
              ? c.map((p) => {
                  return (
                    (r = G1()), s(r, "d", p), L(() => s(r, "fill", u())), r
                  );
                  var r;
                })
              : ((f = G1()), s(f, "d", c), L(() => s(f, "fill", i())), f);
            var f;
          },
        })
      ),
      l
    );
    var l;
  },
  h2 = (a) => {
    const [t, l] = w(!1),
      [c, n] = w(!1),
      [i, u] = w(!1),
      f = (r) => {
        var o, b;
        (b = (o = [[() => l(!1)], [() => n(!1)], [() => u(!1)]][r])[0]) ==
          null || b.call(o);
      };
    V(() => {
      var r;
      if (a.gameValue) {
        const m = C.getBigWinPosition(a.gameValue),
          o = [
            () =>
              v(void 0, null, function* () {
                l(!0);
              }),
            () =>
              v(void 0, null, function* () {
                n(!0);
              }),
            () =>
              v(void 0, null, function* () {
                u(!0);
              }),
          ];
        m && ((r = o[m - 1]) == null || r.call(o));
      }
    });
    const p = A(() => [t(), c(), i()]);
    return (() => {
      var r = o2(),
        m = r.firstChild.firstChild,
        o = m.nextSibling.firstChild;
      o.firstChild;
      var b = o.nextSibling,
        D = b.firstChild,
        F = D.firstChild.nextSibling.nextSibling.nextSibling,
        Y = F.nextSibling.nextSibling.nextSibling,
        Q = Y.nextSibling.nextSibling.nextSibling,
        O = Q.nextSibling.nextSibling.nextSibling,
        _ = O.nextSibling.nextSibling.nextSibling,
        Z = _.nextSibling.nextSibling.nextSibling,
        W = Z.nextSibling.nextSibling.nextSibling,
        P = W.nextSibling.nextSibling.nextSibling,
        a1 = P.nextSibling.nextSibling.nextSibling,
        N = a1.nextSibling.nextSibling.nextSibling,
        G = N.nextSibling.nextSibling.nextSibling,
        t1 = G.nextSibling.nextSibling.nextSibling,
        j = t1.nextSibling.nextSibling.nextSibling,
        R = j.nextSibling.nextSibling.nextSibling,
        T = R.nextSibling.nextSibling.nextSibling,
        l1 = T.nextSibling.nextSibling.nextSibling,
        e1 = l1.nextSibling.nextSibling.nextSibling,
        r1 = e1.nextSibling.nextSibling.nextSibling,
        M = r1.nextSibling,
        u1 = M.firstChild,
        $ = M.nextSibling,
        c1 = $.firstChild,
        d1 = $.nextSibling.firstChild,
        f1 = D.nextSibling;
      return (
        x(m, () =>
          h.darken
            ? `
  .roll-color {
    fill: #3A4142;
  }
  
  .bg-color {
    fill: #1E2121;
    stroke: #1E2121;
    opacity: 0.75;
  }

  .svg-texts {
    pointer-events: none;
    fill: #000;
    path {
      fill-opacity: 1;
    }
  }
`
            : `
 .roll-color {
    fill: #fff;
  }
  
  .bg-color {
    fill: #BAC4C4;
    stroke: #BAC4C4;
    opacity: 0.5;
  }

  .svg-texts {
    pointer-events: none;
    fill: #627E8F;
    path {
      fill-opacity: 0.6;
    }
  }
`
        ),
        x(
          o,
          g(X, {
            each: X1,
            children: (e, d) =>
              e.map((y, k) =>
                g(u2, {
                  data: y,
                  get opt() {
                    return `${d()}${k}`;
                  },
                  get position() {
                    return d();
                  },
                  get dataFilled() {
                    return a.layers[d()] > k;
                  },
                  get lastOne() {
                    return e.length === k + 1;
                  },
                  get orangeBigWin() {
                    return i();
                  },
                  get greenBigWin() {
                    return t();
                  },
                  get purpleBigWin() {
                    return c();
                  },
                  canAnimate: !0,
                  onAnimateComplete: f,
                })
              ),
          }),
          null
        ),
        x(
          b,
          g(X, {
            each: Q1,
            children: (e, d) =>
              g(f2, {
                data: e,
                get index() {
                  return d();
                },
                get key() {
                  return d();
                },
                get innerLayers() {
                  return a.layers;
                },
                get bigWins() {
                  return p();
                },
              }),
          }),
          f1
        ),
        L(
          (e) => {
            var d = h.darken ? "#000" : "#6B8EA1",
              y = h.darken ? "#000" : "#6B8EA1",
              k = h.darken ? "#000" : "#6B8EA1",
              S = h.darken ? "#000" : "#6B8EA1",
              q = h.darken ? "#000" : "#6B8EA1",
              K = h.darken ? "#000" : "#6B8EA1",
              B = h.darken ? "#000" : "#6B8EA1",
              n1 = h.darken ? "#000" : "#6B8EA1",
              i1 = h.darken ? "#000" : "#6B8EA1",
              h1 = h.darken ? "#000" : "#6B8EA1",
              g1 = h.darken ? "#000" : "#6B8EA1",
              m1 = h.darken ? "#000" : "#6B8EA1",
              p1 = h.darken ? "#000" : "#6B8EA1",
              x1 = h.darken ? "#000" : "#6B8EA1",
              b1 = h.darken ? "#000" : "#6B8EA1",
              y1 = h.darken ? "#000" : "#6B8EA1",
              k1 = h.darken ? "#000" : "#6B8EA1",
              z1 = h.darken ? "#000" : "#6B8EA1",
              v1 = F1,
              S1 = V1,
              w1 = T1;
            return (
              d !== e.e && s(F, "fill", (e.e = d)),
              y !== e.t && s(Y, "fill", (e.t = y)),
              k !== e.a && s(Q, "fill", (e.a = k)),
              S !== e.o && s(O, "fill", (e.o = S)),
              q !== e.i && s(_, "fill", (e.i = q)),
              K !== e.n && s(Z, "fill", (e.n = K)),
              B !== e.s && s(W, "fill", (e.s = B)),
              n1 !== e.h && s(P, "fill", (e.h = n1)),
              i1 !== e.r && s(a1, "fill", (e.r = i1)),
              h1 !== e.d && s(N, "fill", (e.d = h1)),
              g1 !== e.l && s(G, "fill", (e.l = g1)),
              m1 !== e.u && s(t1, "fill", (e.u = m1)),
              p1 !== e.c && s(j, "fill", (e.c = p1)),
              x1 !== e.w && s(R, "fill", (e.w = x1)),
              b1 !== e.m && s(T, "fill", (e.m = b1)),
              y1 !== e.f && s(l1, "fill", (e.f = y1)),
              k1 !== e.y && s(e1, "fill", (e.y = k1)),
              z1 !== e.g && s(r1, "fill", (e.g = z1)),
              v1 !== e.p && s(u1, "href", (e.p = v1)),
              S1 !== e.b && s(c1, "href", (e.b = S1)),
              w1 !== e.T && s(d1, "href", (e.T = w1)),
              e
            );
          },
          {
            e: void 0,
            t: void 0,
            a: void 0,
            o: void 0,
            i: void 0,
            n: void 0,
            s: void 0,
            h: void 0,
            r: void 0,
            d: void 0,
            l: void 0,
            u: void 0,
            c: void 0,
            w: void 0,
            m: void 0,
            f: void 0,
            y: void 0,
            g: void 0,
            p: void 0,
            b: void 0,
            T: void 0,
          }
        ),
        r
      );
    })();
  };
var g2 = z(
  '<div class="relative flex items-center justify-center w-full h-full mb-2 mt-4"><div class="flex items-center justify-center absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 overflow-hidden rounded-full pointer-events-none w-28 h-28 bg-layer1"><div class="text-2xl text-brand">x'
);
const s3 = {
  Main: function () {
    return [g(n2, {}), g(V0, {})];
  },
  Detail: (a) => {
    const t = o0(),
      l = a.betLog.gv,
      c = a.betLog.gameValue,
      { leftIndex: n, centerIndex: i, rightIndex: u } = l,
      f = a.betLog.odds / 1e4;
    return (
      (r = g2()),
      (m = r.firstChild),
      (o = m.firstChild),
      (b = o.firstChild),
      x(
        r,
        ((p = O1(() => !!t())),
        () => p() && g(h2, { layers: [n, i, u], gameValue: c })),
        m
      ),
      x(o, f, b),
      r
    );
    var p, r, m, o, b;
  },
  game: C,
};
export { s3 as default };
